{"version":3,"file":"style.css","sources":["style.scss","sass/config/mixins.scss","sass/config/reset.scss","sass/config/colors.scss","sass/config/fonts.scss","sass/config/width-and-gridth.scss","../../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_settings.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_context.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_helpers.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_parsers.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_query.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_single.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/single/_default.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_double.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default-pair.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_double-string.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_triple.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/triple/_default.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_resolution.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/resolution/_resolution.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_no-query.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_respond-to.scss","../../bower_components/breakpoint-sass/stylesheets/breakpoint/_legacy-settings.scss","../../bower_components/singularity/stylesheets/_singularitygs.scss","../../bower_components/singularity/stylesheets/singularitygs/_helpers.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_settings.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_find.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_sass-lists.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_columns.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_span-shared.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_directions.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_sort.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_background-grid.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_str-replace.scss","../../bower_components/singularity/stylesheets/singularitygs/helpers/_layout.scss","../../bower_components/singularity/stylesheets/singularitygs/_language.scss","../../bower_components/singularity/stylesheets/singularitygs/language/_parse-list.scss","../../bower_components/singularity/stylesheets/singularitygs/language/_parse-add.scss","../../bower_components/singularity/stylesheets/singularitygs/language/_span.scss","../../bower_components/singularity/stylesheets/singularitygs/_math.scss","../../bower_components/singularity/stylesheets/singularitygs/math/_columns.scss","../../bower_components/singularity/stylesheets/singularitygs/math/_gutters.scss","../../bower_components/singularity/stylesheets/singularitygs/math/_context.scss","../../bower_components/singularity/stylesheets/singularitygs/math/_grid.scss","../../bower_components/singularity/stylesheets/singularitygs/_grids.scss","../../bower_components/singularity/stylesheets/singularitygs/grids/_add.scss","../../bower_components/singularity/stylesheets/singularitygs/grids/_find.scss","../../bower_components/singularity/stylesheets/singularitygs/_gutters.scss","../../bower_components/singularity/stylesheets/singularitygs/gutters/_add.scss","../../bower_components/singularity/stylesheets/singularitygs/gutters/_find.scss","../../bower_components/singularity/stylesheets/singularitygs/_gutter-styles.scss","../../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_add.scss","../../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_find.scss","../../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_helpers.scss","../../bower_components/singularity/stylesheets/singularitygs/_api.scss","../../bower_components/singularity/stylesheets/singularitygs/api/_float.scss","../../bower_components/singularity/stylesheets/singularitygs/api/_isolation.scss","../../bower_components/singularity/stylesheets/singularitygs/api/_calc.scss","sass/config/variebles.scss","sass/main.scss","sass/modules/header.scss","sass/modules/introduction.scss","sass/modules/advantages.scss","sass/modules/how_it_works.scss","sass/modules/clinics.scss","sass/modules/doctors.scss","sass/modules/reviews.scss","sass/modules/banner.scss","sass/modules/footer.scss","sass/modules/form.scss","sass/modules/popup.scss","sass/pages/answer.scss","sass/pages/clinics.scss","sass/pages/contacts.scss","sass/pages/price.scss","sass/pages/review.scss","sass/pages/doctors.scss"],"sourcesContent":["//config\r\n@import 'sass/config/mixins';\r\n@import 'sass/config/reset';\r\n@import 'sass/config/colors';\r\n@import 'sass/config/fonts';\r\n@import 'sass/config/width-and-gridth';\r\n\r\n@import '../../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss';\r\n@import '../../bower_components/singularity/stylesheets/_singularitygs.scss';\r\n\r\n@import 'sass/config/variebles';\r\n@import 'sass/main';\r\n\r\nhtml {\r\n  width:100%;\r\n  height:100%;\r\n  font-size: 100.01%;\r\n\r\n}\r\n\r\n\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  font-size: 15px;\r\n  box-sizing: border-box;\r\n  min-width: 1170px;\r\n\r\n}\r\n\r\n%clearfix {\r\n  &:after {\r\n\tcontent: '';\r\n\tdisplay: block;\r\n\tclear: both;\r\n  }\r\n}\r\n\r\n\r\n.wrapper  {\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  min-height: 100%;\r\n  position: relative;\r\n  height: auto !important;\r\n  padding: 44px 0 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.website {\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n\r\n\r\n//modules\r\n@import 'sass/modules/header';\r\n@import 'sass/modules/introduction';\r\n@import 'sass/modules/advantages';\r\n@import 'sass/modules/how_it_works';\r\n@import 'sass/modules/clinics';\r\n@import 'sass/modules/doctors';\r\n@import 'sass/modules/reviews';\r\n@import 'sass/modules/banner';\r\n@import 'sass/modules/footer';\r\n@import 'sass/modules/form';\r\n@import 'sass/modules/popup';\r\n\r\n\r\n\r\n//pages\r\n@import 'sass/pages/answer';\r\n@import 'sass/pages/clinics';\r\n@import 'sass/pages/contacts';\r\n@import 'sass/pages/price';\r\n@import 'sass/pages/review';\r\n@import 'sass/pages/doctors';\r\n\r\n\r\n\r\n","@mixin text-shadow ($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {\r\n\ttext-shadow: $string;\r\n}\r\n@mixin box-shadow ($string) {\r\n\t-webkit-box-shadow: $string;\r\n\t-moz-box-shadow:    $string;\r\n\tbox-shadow:         $string;\r\n}\r\n@mixin drop-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {\r\n\t-webkit-box-shadow:\t$x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n\t-moz-box-shadow:\t$x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n\tbox-shadow:\t\t$x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n}\r\n@mixin inner-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {\r\n\t-webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n\t-moz-box-shadow:    inset $x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n\tbox-shadow:         inset $x $y $blur $spread rgba(0, 0, 0, $alpha);\r\n}\r\n\r\n@mixin box-sizing ($type: border-box) {\r\n\t-webkit-box-sizing: $type;\r\n\t-moz-box-sizing:    $type;\r\n\tbox-sizing:         $type;\r\n}\r\n\r\n@mixin border-radius ($radius: 5px) {\r\n\t-webkit-border-radius: $radius;\r\n\t-moz-border-radius:    $radius;\r\n\tborder-radius:         $radius;\r\n\r\n\t-moz-background-clip:    padding;\r\n\t-webkit-background-clip: padding-box;\r\n\tbackground-clip:         padding-box;\r\n}\r\n@mixin border-radiuses ($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {\r\n\t-webkit-border-top-right-radius:    $topright;\r\n\t-webkit-border-bottom-right-radius: $bottomright;\r\n\t-webkit-border-bottom-left-radius:  $bottomleft;\r\n\t-webkit-border-top-left-radius:     $topleft;\r\n\r\n\t-moz-border-radius-topright:        $topright;\r\n\t-moz-border-radius-bottomright:     $bottomright;\r\n\t-moz-border-radius-bottomleft:      $bottomleft;\r\n\t-moz-border-radius-topleft:         $topleft;\r\n\r\n\tborder-top-right-radius:            $topright;\r\n\tborder-bottom-right-radius:         $bottomright;\r\n\tborder-bottom-left-radius:          $bottomleft;\r\n\tborder-top-left-radius:             $topleft;\r\n\r\n\t-moz-background-clip:    padding;\r\n\t-webkit-background-clip: padding-box;\r\n\tbackground-clip:         padding-box;\r\n}\r\n\r\n@mixin opacity ($opacity: 0.5) {\r\n\t-webkit-opacity: \t$opacity;\r\n\t-moz-opacity: \t\t$opacity;\r\n\topacity: \t\t$opacity;\r\n}\r\n\r\n@mixin gradient ($startColor: #eee, $endColor: white) {\r\n\tbackground-color: $startColor;\r\n\tbackground: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));\r\n\tbackground: -webkit-linear-gradient(top, $startColor, $endColor);\r\n\tbackground: -moz-linear-gradient(top, $startColor, $endColor);\r\n\tbackground: -ms-linear-gradient(top, $startColor, $endColor);\r\n\tbackground: -o-linear-gradient(top, $startColor, $endColor);\r\n}\r\n@mixin horizontal-gradient ($startColor: #eee, $endColor: white) {\r\n\tbackground-color: $startColor;\r\n\tbackground-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));\r\n\tbackground-image: -webkit-linear-gradient(left, $startColor, $endColor);\r\n\tbackground-image: -moz-linear-gradient(left, $startColor, $endColor);\r\n\tbackground-image: -ms-linear-gradient(left, $startColor, $endColor);\r\n\tbackground-image: -o-linear-gradient(left, $startColor, $endColor);\r\n}\r\n\r\n@mixin animation ($name, $duration: 300ms, $delay: 0, $ease: ease) {\r\n\t-webkit-animation: $name $duration $delay $ease;\r\n\t-moz-animation:    $name $duration $delay $ease;\r\n\t-ms-animation:     $name $duration $delay $ease;\r\n}\r\n\r\n@mixin transition ($transition) {\r\n\t-webkit-transition: $transition;\r\n\t-moz-transition:    $transition;\r\n\t-ms-transition:     $transition;\r\n\t-o-transition:      $transition;\r\n}\r\n@mixin transition-transform ($arg) {\r\n\t-webkit-transition: -webkit-transform $arg;\r\n\t-moz-transition: -moz-transform $arg;\r\n\t-o-transition: -o-transform $arg;\r\n\ttransition: transform $arg;\r\n\r\n\t-webkit-transform: translatez(0);\r\n\t-moz-transform: translatez(0);\r\n\t-ms-transform: translatez(0);\r\n\t-o-transform: translatez(0);\r\n\ttransform: translatez(0);\r\n}\r\n@mixin transform($string){\r\n\t-webkit-transform: \t $string;\r\n\t-moz-transform: \t $string;\r\n\t-ms-transform: \t\t $string;\r\n\t-o-transform: \t\t $string;\r\n\ttransform:\t\t\t $string;\r\n}\r\n@mixin scale ($factor) {\r\n\t-webkit-transform: scale($factor);\r\n\t-moz-transform: \t scale($factor);\r\n\t-ms-transform: \t\t scale($factor);\r\n\t-o-transform: \t\t scale($factor);\r\n}\r\n@mixin  rotate ($deg) {\r\n\t-webkit-transform: rotate($deg);\r\n\t-moz-transform: \t rotate($deg);\r\n\t-ms-transform: \t\t rotate($deg);\r\n\t-o-transform: \t\t rotate($deg);\r\n}\r\n@mixin  skew ($deg, $deg2) {\r\n\t-webkit-transform:       skew($deg, $deg2);\r\n\t-moz-transform: \t skew($deg, $deg2);\r\n\t-ms-transform: \t\t skew($deg, $deg2);\r\n\t-o-transform: \t\t skew($deg, $deg2);\r\n}\r\n@mixin  translate ($x, $y:0) {\r\n\t-webkit-transform:       translate($x, $y);\r\n\t-moz-transform: \t translate($x, $y);\r\n\t-ms-transform: \t\t translate($x, $y);\r\n\t-o-transform: \t\t translate($x, $y);\r\n}\r\n@mixin  translate3d ($x, $y: 0, $z: 0) {\r\n\t-webkit-transform:       translate3d($x, $y, $z);\r\n\t-moz-transform: \t translate3d($x, $y, $z);\r\n\t-ms-transform: \t\t translate3d($x, $y, $z);\r\n\t-o-transform: \t\t translate3d($x, $y, $z);\r\n}\r\n@mixin  perspective ($value: 1000) {\r\n\t-webkit-perspective: \t$value;\r\n\t-moz-perspective: \t$value;\r\n\t-ms-perspective: \t$value;\r\n\tperspective: \t\t$value;\r\n}\r\n@mixin  transform-origin ($x:center, $y:center) {\r\n\t-webkit-transform-origin: $x $y;\r\n\t-moz-transform-origin:    $x $y;\r\n\t-ms-transform-origin:     $x $y;\r\n\t-o-transform-origin:      $x $y;\r\n}\r\n\r\n// family mixins\r\n\r\n/// Select all children from the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin first($num) {\r\n\t@if $num == 1 {\r\n\t\t&:first-child {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\t@else {\r\n\t\t&:nth-child(-n + #{$num}) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/// Select all children from the last to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin last($num) {\r\n\t&:nth-last-child(-n + #{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children after the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin after-first($num) {\r\n\t&:nth-child(n + #{$num + 1}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children before `$num` from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-end($num) {\r\n\t&:nth-last-child(#{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin between($first, $last) {\r\n\t&:nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all even children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even-between($first, $last) {\r\n\t&:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all odd children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd-between($first, $last) {\r\n\t&:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all `$num` children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin n-between($num, $first, $last) {\r\n\t&:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select all children but `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but($num) {\r\n\t&:not(:nth-child(#{$num})) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n/// @alias every\r\n@mixin each($num) {\r\n\t&:nth-child(#{$num}n) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin every($num) {\r\n\t&:nth-child(#{$num}n) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select the `$num` child from the start and the `$num` child from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-first-last($num) {\r\n\t&:nth-child(#{$num}),\r\n\t&:nth-last-child(#{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select the item in the middle of `$num` child. Only works with odd number\r\n/// chain.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin middle($num) {\r\n\t&:nth-child(#{round($num / 2)}){\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select all children between the `$num` first and the `$num` last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but-first-last($num) {\r\n\t&:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// This quantity-query mixin will only select the first of `$limit` items. It will not\r\n/// work if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-of($limit) {\r\n\t&:nth-last-child(#{$limit}):first-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will only select the last of `$limit` items. It will not\r\n/// if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-of($limit) {\r\n\t&:nth-of-type(#{$limit}):nth-last-of-type(1) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at least `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-least($num) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\t&:nth-last-child(n + #{$num}),\r\n\t&:nth-last-child(n + #{$num}) ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at most `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-most($num) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\t&:nth-last-child(-n + #{$num}):first-child,\r\n\t&:nth-last-child(-n + #{$num}):first-child ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin in-between($min, $max) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\t&:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,\r\n\t&:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all even children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even() {\r\n\t&:nth-child(even) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all odd children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd() {\r\n\t&:nth-child(odd) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select only the first and last child.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-last() {\r\n\t&:first-child,\r\n\t&:last-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @alias only\r\n@mixin unique() {\r\n\t&:only-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin only() {\r\n\t&:only-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select children if they are not unique. Meaning if there is at\r\n/// least 2 children, the style is applied.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin not-unique() {\r\n\t&:not(:only-child) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// This mixin is used to automatically sort z-index in numerical order. But it\r\n/// can also sort them in anti-numerical order, depending the parameters you use.\r\n/// @group using functions\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - Number of children\r\n/// @param {string} $direction [forward] - Direction of the sort\r\n/// @param {number} $index [0] - Index of the sorting\r\n@mixin child-index($num, $direction: 'forward', $index: 0) {\r\n\t@for $i from 1 through $num {\r\n\t\t@if ($direction == 'forward') {\r\n\t\t\t&:nth-child(#{$i}) {\r\n\t\t\t\tz-index: order-index($i, $index);\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t} @else if ($direction == 'backward') {\r\n\t\t\t&:nth-last-child(#{$i}) {\r\n\t\t\t\tz-index: order-index($i, $index);\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/// Used by the child-index mixin. It will returned the proper sorted numbers\r\n/// depending on the `$index` value.\r\n/// @access private\r\n/// @param {number} $num - Number of children\r\n/// @param {number} $index - Index of the sorting\r\n@function order-index($i, $index) {\r\n\t@return ($index + $i);\r\n}\r\n\r\n// custom mixins\r\n\r\n@mixin color-debug ($r, $g, $b, $a) {\r\n//\tbackground-color: rgba($r, $g, $b, $a);\r\n}","/* CSS Reset section */\r\n\r\nhtml {\r\n\twidth:100%;\r\n\theight:100%;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tfont-size: 100.01%;\r\n\t//min-width: 1000px;\r\n\tmin-height: 580px;\r\n}\r\n\r\nbody {\r\n\theight: 100%;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tfont-size: 12px;\r\n\tline-height: 1.2;\r\n\tfont-family: Arial, Helvetica, sans-serif;\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-position: 50% 0;\r\n\t//\t-webkit-transform:translate3d(0,0,0);\r\n}\r\n\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, nav, section {\r\n\tdisplay: block;\r\n}\r\n\r\nol, ul {\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\nimg {\r\n\tborder: 0;\r\n}\r\n\r\na, a:focus, a img, a img:focus {\r\n\tborder: 0 none;\r\n}\r\n\r\na, a img, textarea, input {\r\n\toutline: 0 none;\r\n}\r\n\r\na:focus {\r\n\toutline: thin dotted;\r\n}\r\n\r\na {\r\n\tcolor: white;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n\tfont-weight: normal;\r\n\tmargin: 0;\r\n}\r\n\r\np {\r\n\tmargin: 0;\r\n}\r\n\r\ndl, dt, dd {\r\n\tmargin :0;\r\n}\r\n\r\ntextarea {\r\n\toverflow: auto;\r\n}\r\n\r\n/* mixins */\r\n\r\n.clearfix {\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t}\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}\r\n","//$background: #f8f9fa;","/*! Generated by Font Squirrel (https://www.fontsquirrel.com) on May 29, 2017 */\r\n\r\n\r\n\r\n@font-face {\r\n\tfont-family: 'pf_din_bold';\r\n\tsrc: url('../fonts/pfdintextcondpro-bold.eot');\r\n\tsrc: url('../fonts/pfdintextcondpro-bold.eot?#iefix') format('embedded-opentype'),\r\n\turl('../fonts/pfdintextcondpro-bold.woff2') format('woff2'),\r\n\turl('../fonts/pfdintextcondpro-bold.woff') format('woff'),\r\n\turl('../fonts/pfdintextcondpro-bold.svg#pf_din_text_cond_probold') format('svg');\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@font-face {\r\n\tfont-family: 'pf_din_italic';\r\n\tsrc: url('../fonts/pfdintextcondpro-italic.eot');\r\n\tsrc: url('../fonts/pfdintextcondpro-italic.eot?#iefix') format('embedded-opentype'),\r\n\turl('../fonts/pfdintextcondpro-italic.woff2') format('woff2'),\r\n\turl('../fonts/pfdintextcondpro-italic.woff') format('woff'),\r\n\turl('../fonts/pfdintextcondpro-italic.svg#pf_din_text_cond_proitalic') format('svg');\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@font-face {\r\n\tfont-family: 'pf_din_light';\r\n\tsrc: url('../fonts/pfdintextcondpro-light.eot');\r\n\tsrc: url('../fonts/pfdintextcondpro-light.eot?#iefix') format('embedded-opentype'),\r\n\turl('../fonts/pfdintextcondpro-light.woff2') format('woff2'),\r\n\turl('../fonts/pfdintextcondpro-light.woff') format('woff'),\r\n\turl('../fonts/pfdintextcondpro-light.svg#pf_din_text_cond_prolight') format('svg');\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@font-face {\r\n\tfont-family: 'pf_din_regular';\r\n\tsrc: url('../fonts/pfdintextcondpro-regular.eot');\r\n\tsrc: url('../fonts/pfdintextcondpro-regular.eot?#iefix') format('embedded-opentype'),\r\n\turl('../fonts/pfdintextcondpro-regular.woff2') format('woff2'),\r\n\turl('../fonts/pfdintextcondpro-regular.woff') format('woff'),\r\n\turl('../fonts/pfdintextcondpro-regular.svg#pf_din_text_cond_proregular') format('svg');\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\r\n}\r\n\r\n@font-face {\r\n\tfont-family: 'pf_din_promedium';\r\n\tsrc: url('../fonts/pfdintextcondpro-medium-webfont.eot');\r\n\tsrc: url('../fonts/pfdintextcondpro-medium-webfont.eot?#iefix') format('embedded-opentype'),\r\n\turl('../fonts/pfdintextcondpro-medium-webfont.woff2') format('woff2'),\r\n\turl('../fonts/pfdintextcondpro-medium-webfont.woff') format('woff'),\r\n\turl('../fonts/pfdintextcondpro-medium-webfont.svg#pf_din_text_cond_promedium') format('svg');\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\r\n}","$tablet-breakpoint: 320px;\r\n$desktop-breakpoint: 1280px;\r\n$desktop-breakpoint-xl: 1366px;\r\n\r\n//\r\n//\r\n//\r\n//@include add-grid(16);\r\n//\r\n//@include add-gutter(15/47);\r\n//@include add-gutter(12/39 at $tablet-breakpoint);\r\n//@include add-gutter(15/47 at $desktop-breakpoint);\r\n//@include add-gutter(10/97 at $small-desktop-breakpoint);\r\n//@include add-gutter(10/117 at $large-desktop-breakpoint);\r\n//Main breakpoints\r\n//$tablet-breakpoint: 500px;\r\n//$small-desktop-breakpoint: 1280px;\r\n//$large-desktop-breakpoint: 1600px;\r\n//\r\n//\r\n////not a standard cases\r\n//$max-content-width: 1600px;\r\n//$small-height-notebook: (max-height 800px);\r\n//$small-height-notebook-for-head: 'only screen' (min-width 1000px) (max-height 800px);\r\n//$landscape-mobile-for-head: 'only screen' (min-width 500px) (max-height 570px);\r\n//$long-tablets: 'only screen' (min-width 500px) (max-width 1000px) (max-height 990px);\r\n//\r\n//\r\n////LP one template delicate-cat\r\n//$desktop-xl: \"screen and (min-width: 1600px)\";\r\n//$desktop-xs: \"screen and (min-width: 1100px) and (max-width: 1279px)\";\r\n//$tablet-xl: \"screen and (min-width: 500px) and (max-width: 1279px)\";\r\n//$mobile: \"screen and (min-width: 320px) and (max-width: 499px)\";\r\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function breakpoint-has($setting) {\n  @if map-has-key($breakpoint, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function breakpoint-get($setting) {\n  @if breakpoint-has($setting) {\n    @return map-get($breakpoint, $setting);\n  }\n  @else {\n    @return map-get($Breakpoint-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function breakpoint-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin breakpoint-change($setting, $value) {\n  $breakpoint-change: breakpoint-set($setting, $value);\n}\n\n@mixin breakpoint-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n@mixin bkpt-change($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n@mixin bkpt-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function breakpoint-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $breakpoint: map-remove($breakpoint, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin breakpoint-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}\n\n@mixin bkpt-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}","//////////////////////////////\n// Private Breakpoint Variables\n//////////////////////////////\n$private-breakpoint-context-holder: ();\n$private-breakpoint-query-count: 0 !default;\n\n//////////////////////////////\n// Breakpoint Has Context\n// Returns whether or not you are inside a Breakpoint query\n//////////////////////////////\n@function breakpoint-has-context() {\n  @if length($private-breakpoint-query-count) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Breakpoint Get Context\n// $feature: Input feature to get it's current MQ context. Returns false if no context\n//////////////////////////////\n@function breakpoint-get-context($feature) {\n  @if map-has-key($private-breakpoint-context-holder, $feature) {\n    $get: map-get($private-breakpoint-context-holder, $feature);\n    // Special handling of no-query from get side so /false/ prepends aren't returned\n    @if $feature == 'no-query' {\n      @if type-of($get) == 'list' and length($get) > 1 and nth($get, 1) == false {\n        $get: nth($get, length($get));\n      }\n    }\n    @return $get;\n  }\n  @else {\n    @if breakpoint-has-context() and $feature == 'media' {\n      @return breakpoint-get('default media');\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n//////////////////////////////\n// Private function to set context\n//////////////////////////////\n@function private-breakpoint-set-context($feature, $value) {\n  @if $value == 'monochrome' {\n    $feature: 'monochrome';\n  }\n\n  $current: map-get($private-breakpoint-context-holder, $feature);\n  @if $current and length($current) == $private-breakpoint-query-count {\n    @warn \"You have already queried against `#{$feature}`. Unexpected things may happen if you query against the same feature more than once in the same `and` query. Breakpoint is overwriting the current context with `#{$value}`\";\n  }\n\n  @if not map-has-key($private-breakpoint-context-holder, $feature) {\n    $v-holder: ();\n    @for $i from 1 to $private-breakpoint-query-count {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n  @else {\n    $v-holder: map-get($private-breakpoint-context-holder, $feature);\n    $length: length($v-holder);\n    @for $i from $length to $private-breakpoint-query-count - 1 {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n\n  @return true;\n}\n\n//////////////////////////////\n// Private function to reset context\n//////////////////////////////\n@mixin private-breakpoint-reset-contexts {\n  $private-breakpoint-context-holder: () !global;\n  $private-breakpoint-query-count: 0 !global;\n}","//////////////////////////////\n// Converts the input value to Base EMs\n//////////////////////////////\n@function breakpoint-to-base-em($value) {\n  $value-unit: unit($value);\n\n  // Will convert relative EMs into root EMs.\n  @if breakpoint-get('base font size') and type-of(breakpoint-get('base font size')) == 'number' and $value-unit == 'em' {\n    $base-unit: unit(breakpoint-get('base font size'));\n\n    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {\n      @return base-conversion($value) / base-conversion(breakpoint-get('base font size')) * 1em;\n    }\n    @else {\n      @warn '#{breakpoint-get(\\'base font size\\')} is not set in valid units for font size!';\n      @return false;\n    }\n  }\n  @else {\n    @return base-conversion($value);\n  }\n}\n\n@function base-conversion($value) {\n  $unit: unit($value);\n\n  @if $unit == 'px' {\n    @return $value / 16px * 1em;\n  }\n  @else if $unit == '%' {\n    @return $value / 100% * 1em;\n  }\n  @else if $unit == 'em' {\n    @return $value;\n  }\n  @else if $unit == 'pt' {\n    @return $value / 12pt * 1em;\n  }\n  @else {\n    @return $value;\n//    @warn 'Everything is terrible! What have you done?!';\n  }\n}\n\n//////////////////////////////\n// Returns whether the feature can have a min/max pair\n//////////////////////////////\n$breakpoint-min-max-features: 'color',\n                              'color-index',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'device-height',\n                              'device-width',\n                              'height',\n                              'monochrome',\n                              'resolution',\n                              'width';\n\n@function breakpoint-min-max($feature) {\n  @each $item in $breakpoint-min-max-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can have a string value\n//////////////////////////////\n$breakpoint-string-features:  'orientation',\n                              'scan',\n                              'color',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'pointer',\n                              'luminosity';\n\n@function breakpoint-string-value($feature) {\n  @each $item in $breakpoint-string-features {\n    @if breakpoint-min-max($item) {\n      @if $feature == 'min-#{$item}' or $feature == 'max-#{$item}' {\n        @return true;\n      }\n    }\n    @else if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature is a media type\n//////////////////////////////\n$breakpoint-media-types:  'all',\n                          'braille',\n                          'embossed',\n                          'handheld',\n                          'print',\n                          'projection',\n                          'screen',\n                          'speech',\n                          'tty',\n                          'tv';\n\n@function breakpoint-is-media($feature) {\n  @each $media in $breakpoint-media-types {\n    @if ($feature == $media) or ($feature == 'not #{$media}') or ($feature == 'only #{$media}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can stand alone\n//////////////////////////////\n$breakpoint-single-string-features: 'color',\n                                    'color-index',\n                                    'grid',\n                                    'monochrome';\n\n@function breakpoint-single-string($feature) {\n  @each $item in $breakpoint-single-string-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature\n//////////////////////////////\n@function breakpoint-is-resolution($feature) {\n  $resolutions: 'device-pixel-ratio', 'dpr';\n\n  @if breakpoint-get('transform resolutions') {\n    $resolutions: append($resolutions, 'resolution');\n  }\n\n  @each $reso in $resolutions {\n    @if index($feature, $reso) or index($feature, 'min-#{$reso}') or index($feature, 'max-#{$reso}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","//////////////////////////////\n// Import Parser Pieces\n//////////////////////////////\n@import \"parsers/query\";\n@import \"parsers/single\";\n@import \"parsers/double\";\n@import \"parsers/triple\";\n@import \"parsers/resolution\";\n\n$Memo-Exists: function-exists(memo-get) and function-exists(memo-set);\n\n//////////////////////////////\n// Breakpoint Function\n//////////////////////////////\n@function breakpoint($query, $contexts...) {\n  $run: true;\n  $return: ();\n\n  // Grab the Memo Output if Memoization can be a thing\n  @if $Memo-Exists {\n    $return: memo-get(breakpoint, breakpoint $query $contexts);\n\n    @if $return != null {\n      $run: false;\n    }\n  }\n\n  @if not $Memo-Exists or $run {\n    // Internal Variables\n    $query-string: '';\n    $query-fallback: false;\n    $return: ();\n\n    // Reserve Global Private Breakpoint Context\n    $holder-context: $private-breakpoint-context-holder;\n    $holder-query-count: $private-breakpoint-query-count;\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n\n    // Test to see if it's a comma-separated list\n    $or-list: if(list-separator($query) == 'comma', true, false);\n\n\n    @if ($or-list == false and breakpoint-get('legacy syntax') == false) {\n      $query-string: breakpoint-parse($query);\n    }\n    @else {\n      $length: length($query);\n\n      $last: nth($query, $length);\n      $query-fallback: breakpoint-no-query($last);\n\n      @if ($query-fallback != false) {\n        $length: $length - 1;\n      }\n\n      @if (breakpoint-get('legacy syntax') == true) {\n        $mq: ();\n\n        @for $i from 1 through $length {\n          $mq: append($mq, nth($query, $i), comma);\n        }\n\n        $query-string: breakpoint-parse($mq);\n      }\n      @else {\n        $query-string: '';\n        @for $i from 1 through $length {\n          $query-string: $query-string + if($i == 1, '', ', ') + breakpoint-parse(nth($query, $i));\n        }\n      }\n    }\n\n    $return: ('query': $query-string,\n        'fallback': $query-fallback,\n        'context holder': $private-breakpoint-context-holder,\n        'query count': $private-breakpoint-query-count\n    );\n    @if length($contexts) > 0 and nth($contexts, 1) != false {\n      @if $query-fallback != false {\n        $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n      }\n      $context-map: ();\n      @each $context in $contexts {\n        $context-map: map-merge($context-map, ($context: breakpoint-get-context($context)));\n      }\n      $return: map-merge($return, (context: $context-map));\n    }\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n    @if $Memo-Exists {\n      $holder: memo-set(breakpoint, breakpoint $query $contexts, $return);\n    }\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// General Breakpoint Parser\n//////////////////////////////\n@function breakpoint-parse($query) {\n  // Increase number of 'and' queries\n  $private-breakpoint-query-count: $private-breakpoint-query-count + 1 !global;\n\n  // Set up Media Type\n  $query-print: '';\n\n  $force-all: ((breakpoint-get('force all media type') == true) and (breakpoint-get('default media') == 'all'));\n  $empty-media: true;\n  @if ($force-all == true) or (breakpoint-get('default media') != 'all') {\n    // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n    $query-print: breakpoint-get('default media');\n    $empty-media: false;\n  }\n\n\n  $query-resolution: false;\n\n  $query-holder: breakpoint-parse-query($query);\n\n\n\n  // Loop over each parsed out query and write it to $query-print\n  $first: true;\n\n  @each $feature in $query-holder {\n    $length: length($feature);\n\n    // Parse a single feature\n    @if ($length == 1) {\n      // Feature is currently a list, grab the actual value\n      $feature: nth($feature, 1);\n\n      // Media Type must by convention be the first item, so it's safe to flat override $query-print, which right now should only be the default media type\n      @if (breakpoint-is-media($feature)) {\n        @if ($force-all == true) or ($feature != 'all') {\n          // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n          $query-print: $feature;\n          $empty-media: false;\n\n          // Set Context\n          $context-setter: private-breakpoint-set-context(media, $query-print);\n        }\n      }\n      @else {\n        $parsed: breakpoint-parse-single($feature, $empty-media, $first);\n        $query-print: '#{$query-print} #{$parsed}';\n        $first: false;\n      }\n    }\n    // Parse a double feature\n    @else if ($length == 2) {\n      @if (breakpoint-is-resolution($feature) != false) {\n        $query-resolution: $feature;\n      }\n      @else {\n        $parsed: null;\n        // If it's a string/number pair,\n        // we check to see if one is a single-string value,\n        // then we parse it as a normal double\n        $alpha: nth($feature, 1);\n        $beta: nth($feature, 2);\n        @if breakpoint-single-string($alpha) or breakpoint-single-string($beta) {\n          $parsed: breakpoint-parse-single($alpha, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n          $parsed: breakpoint-parse-single($beta, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n        }\n        @else {\n          $parsed: breakpoint-parse-double($feature, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n        }\n      }\n    }\n    // Parse a triple feature\n    @else if ($length == 3) {\n      $parsed: breakpoint-parse-triple($feature, $empty-media, $first);\n      $query-print: '#{$query-print} #{$parsed}';\n      $first: false;\n    }\n\n  }\n\n  @if ($query-resolution != false) {\n    $query-print: breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first);\n  }\n\n  // Loop through each feature that's been detected so far and append 'false' to the the value list to increment their counters\n  @each $f, $v in $private-breakpoint-context-holder {\n    $v-holder: $v;\n    $length: length($v-holder);\n    @if length($v-holder) < $private-breakpoint-query-count {\n      @for $i from $length to $private-breakpoint-query-count {\n        @if $f == 'media' {\n          $v-holder: append($v-holder, breakpoint-get('default media'));\n        }\n        @else {\n          $v-holder: append($v-holder, false);\n        }\n      }\n    }\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($f: $v-holder)) !global;\n  }\n\n  @return $query-print;\n}\n","@function breakpoint-parse-query($query) {\n  // Parse features out of an individual query\n  $feature-holder: ();\n  $query-holder: ();\n  $length: length($query);\n\n  @if $length == 2 {\n    // If we've got a string/number, number/string, check to see if it's a valid string/number pair or two singles\n    @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') or (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'string') {\n\n      $number: '';\n      $value: '';\n\n      @if type-of(nth($query, 1)) == 'string' {\n        $number: nth($query, 2);\n        $value: nth($query, 1);\n      }\n      @else {\n        $number: nth($query, 1);\n        $value: nth($query, 2);\n      }\n\n      // If the string value can be a single value, check to see if the number passed in is a valid input for said single value. Fortunately, all current single-value options only accept unitless numbers, so this check is easy.\n      @if breakpoint-single-string($value) {\n        @if unitless($number) {\n          $feature-holder: append($value, $number, space);\n          $query-holder: append($query-holder, $feature-holder, comma);\n          @return $query-holder;\n        }\n      }\n      // If the string is a media type, split the query\n      @if breakpoint-is-media($value) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $query-holder: append($query-holder, nth($query, 2));\n        @return $query-holder;\n      }\n      // If it's not a single feature, we're just going to assume it's a proper string/value pair, and roll with it.\n      @else {\n        $feature-holder: append($value, $number, space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n\n    }\n    // If they're both numbers, we assume it's a double and roll with that\n    @else if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {\n      $feature-holder: append(nth($query, 1), nth($query, 2), space);\n      $query-holder: append($query-holder, $feature-holder, comma);\n      @return $query-holder;\n    }\n    // If they're both strings and neither are singles, we roll with that.\n    @else if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'string') {\n      @if not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n    }\n  }\n  @else if $length == 3 {\n    // If we've got three items and none is a list, we check to see\n    @if type-of(nth($query, 1)) != 'list' and type-of(nth($query, 2)) != 'list' and type-of(nth($query, 3)) != 'list' {\n      // If none of the items are single string values and none of the values are media values, we're good.\n      @if (not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) and not breakpoint-single-string(nth($query, 3))) and  ((not breakpoint-is-media(nth($query, 1)) and not breakpoint-is-media(nth($query, 2)) and not breakpoint-is-media(nth($query, 3)))) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $feature-holder: append($feature-holder, nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n      // let's check to see if the first item is a media type\n      @else if breakpoint-is-media(nth($query, 1)) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $feature-holder: append(nth($query, 2), nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder);\n        @return $query-holder;\n      }\n    }\n  }\n\n  // If it's a single item, or if it's not a special case double or triple, we can simply return the query.\n  @return $query;\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"single/default\";\n\n@function breakpoint-parse-single($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // If it's a single feature that can stand alone, we let it\n  @if (breakpoint-single-string($feature)) {\n    $parsed: $feature;\n    // Set Context\n    $context-setter: private-breakpoint-set-context($feature, $feature);\n  }\n  // If it's not a stand alone feature, we pass it off to the default handler.\n  @else {\n    $parsed: breakpoint-parse-default($feature);\n  }\n\n  @return $leader + '(' + $parsed + ')';\n}\n","@function breakpoint-parse-default($feature) {\n  $default: breakpoint-get('default feature');\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($default, $feature);\n\n  @if (breakpoint-get('to ems') == true) and (type-of($feature) == 'number') {\n    @return '#{$default}: #{breakpoint-to-base-em($feature)}';\n  }\n  @else {\n    @return '#{$default}: #{$feature}';\n  }\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"double/default-pair\";\n@import \"double/double-string\";\n@import \"double/default\";\n\n@function breakpoint-parse-double($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  $first: nth($feature, 1);\n  $second: nth($feature, 2);\n\n  // If we've got two numbers, we know we need to use the default pair because there are no media queries that has a media feature that is a number\n  @if type-of($first) == 'number' and type-of($second) == 'number' {\n    $parsed: breakpoint-parse-default-pair($first, $second);\n  }\n  // If they are both strings, we send it through the string parser\n  @else if type-of($first) == 'string' and type-of($second) == 'string' {\n    $parsed: breakpoint-parse-double-string($first, $second);\n  }\n  // If it's a string/number pair, we parse it as a normal double\n  @else {\n    $parsed: breakpoint-parse-double-default($first, $second);\n  }\n\n  @return $leader + $parsed;\n}\n","@function breakpoint-parse-default-pair($first, $second) {\n  $default: breakpoint-get('default pair');\n  $min: '';\n  $max: '';\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$default}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$default}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$default}: #{$min}) and (max-#{$default}: #{$max})';\n}\n","@function breakpoint-parse-double-string($first, $second) {\n  $feature: '';\n  $value: '';\n\n  // Test to see which is the feature and which is the value\n  @if (breakpoint-string-value($first) == true) {\n    $feature: $first;\n    $value: $second;\n  }\n  @else if (breakpoint-string-value($second) == true) {\n    $feature: $second;\n    $value: $first;\n  }\n  @else {\n    @warn \"Neither #{$first} nor #{$second} is a valid media query name.\";\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @return '(#{$feature}: #{$value})';\n}","@function breakpoint-parse-double-default($first, $second) {\n  $feature: '';\n  $value: '';\n\n  @if type-of($first) == 'string' {\n    $feature: $first;\n    $value: $second;\n  }\n  @else {\n    $feature: $second;\n    $value: $first;\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @if (breakpoint-get('to ems') == true) {\n    $value: breakpoint-to-base-em($value);\n  }\n\n  @return '(#{$feature}: #{$value})'\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"triple/default\";\n\n@function breakpoint-parse-triple($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // separate the string features from the value numbers\n  $string: null;\n  $numbers: null;\n  @each $val in $feature {\n    @if type-of($val) == string {\n      $string: $val;\n    }\n    @else {\n      @if type-of($numbers) == 'null' {\n        $numbers: $val;\n      }\n      @else {\n        $numbers: append($numbers, $val);\n      }\n    }\n  }\n\n  $parsed: breakpoint-parse-triple-default($string, nth($numbers, 1), nth($numbers, 2));\n\n  @return $leader + $parsed;\n\n}\n","@function breakpoint-parse-triple-default($feature, $first, $second) {\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$feature}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$feature}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$feature}: #{$min}) and (max-#{$feature}: #{$max})';\n}\n","@import \"resolution/resolution\";\n\n@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  @if breakpoint-get('transform resolutions') and $query-resolution {\n    $resolutions: breakpoint-make-resolutions($query-resolution);\n    $length: length($resolutions);\n    $query-holder: '';\n\n    @for $i from 1 through $length {\n      $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';\n      @if $i == 1 {\n        $query-holder: $query;\n      }\n      @else {\n        $query-holder: '#{$query-holder}, #{$query}';\n      }\n    }\n\n    @return $query-holder;\n  }\n  @else {\n    // Return with attached resolution\n    @return $query-print;\n  }\n}\n","@function breakpoint-make-resolutions($resolution) {\n  $length: length($resolution);\n\n  $output: ();\n\n  @if $length == 2 {\n    $feature: '';\n    $value: '';\n\n    // Find which is number\n    @if type-of(nth($resolution, 1)) == 'number' {\n      $value: nth($resolution, 1);\n    }\n    @else {\n      $value: nth($resolution, 2);\n    }\n\n    // Determine min/max/standard\n    @if index($resolution, 'min-resolution') {\n      $feature: 'min-';\n    }\n    @else if index($resolution, 'max-resolution') {\n      $feature: 'max-';\n    }\n\n    $standard: '(#{$feature}resolution: #{$value})';\n\n    // If we're not dealing with dppx,\n    @if unit($value) != 'dppx' {\n      $base: 96dpi;\n      @if unit($value) == 'dpcm' {\n        $base: 243.84dpcm;\n      }\n      // Write out feature tests\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n    }\n    @else {\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';\n      $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n      $output: append($output, $fallback, space);\n    }\n\n  }\n\n  @return $output;\n}\n","@function breakpoint-no-query($query) {\n  @if type-of($query) == 'list' {\n    $keyword: nth($query, 1);\n\n    @if type-of($keyword) == 'string' and ($keyword == 'no-query' or $keyword == 'no query' or $keyword == 'fallback') {\n      @return nth($query, 2);\n    }\n    @else {\n      @return false;\n    }\n  }\n  @else {\n    @return false;\n  }\n}\n","////////////////////////\n// Default the Breakpoints variable\n////////////////////////\n$breakpoints: () !default;\n$BREAKPOINTS: () !default;\n\n////////////////////////\n// Respond-to API Mixin\n////////////////////////\n@mixin respond-to($context, $no-query: false) {\n  @if length($breakpoints) > 0 and length($BREAKPOINTS) == 0 {\n    @warn \"In order to avoid variable namespace collisions, we have updated the way to add breakpoints for respond-to. Please change all instances of `$breakpoints: add-breakpoint()` to `@include add-breakpoint()`. The `add-breakpoint()` function will be deprecated in a future release.\";\n    $BREAKPOINTS: $breakpoints !global;\n    $breakpoints: () !global;\n  }\n\n  @if type-of($BREAKPOINTS) != 'map' {\n    // Just in case someone writes gibberish to the $breakpoints variable.\n    @warn \"Your breakpoints aren't a map! `respond-to` expects a map. Please check the value of $BREAKPOINTS variable.\";\n    @content;\n  }\n  @else if map-has-key($BREAKPOINTS, $context) {\n    @include breakpoint(map-get($BREAKPOINTS, $context), $no-query) {\n      @content;\n    }\n  }\n  @else if not map-has-key($BREAKPOINTS, $context) {\n    @warn \"`#{$context}` isn't a defined breakpoint! Please add it using `$breakpoints: add-breakpoint(`#{$context}`, $value);`\";\n    @content;\n  }\n  @else {\n    @warn \"You haven't created any breakpoints yet! Make some already! `@include add-breakpoint($name, $bkpt)`\";\n    @content;\n  }\n}\n\n//////////////////////////////\n// Add Breakpoint to Breakpoints\n// TODO: Remove function in next release\n//////////////////////////////\n@function add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($breakpoints) == 0 {\n    @return $output;\n  }\n  @else {\n    @if map-has-key($breakpoints, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      @return $breakpoints;\n    }\n    @else if not map-has-key($breakpoints, $name) or $overwrite == true {\n      @return map-merge($breakpoints, $output);\n    }\n  }\n}\n\n@mixin add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($BREAKPOINTS) == 0 {\n    $BREAKPOINTS: $output !global;\n  }\n  @else {\n    @if map-has-key($BREAKPOINTS, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      $BREAKPOINTS: $BREAKPOINTS !global;\n    }\n    @else if not map-has-key($BREAKPOINTS, $name) or $overwrite == true {\n      $BREAKPOINTS: map-merge($BREAKPOINTS, $output) !global;\n    }\n  }\n}\n\n@function get-breakpoint($name: false) {\n  @if $name == false {\n    @return $BREAKPOINTS;\n  }\n  @else {\n    @return map-get($BREAKPOINTS, $name);\n  }\n}\n","@mixin legacy-settings-warning {\n  $legacyVars: (\n    'default-media': 'default media',\n    'default-feature': 'default feature',\n    'force-media-all': 'force all media type',\n    'to-ems': 'to ems',\n    'resolutions': 'transform resolutions',\n    'no-queries': 'no queries',\n    'no-query-fallbacks': 'no query fallbacks',\n    'base-font-size': 'base font size',\n    'legacy-syntax': 'legacy syntax'\n  );\n\n  @each $legacy, $new in $legacyVars {\n    @if global-variable-exists('breakpoint-' + $legacy) {\n      @warn \"In order to avoid variable namspace collisions, we have updated the way to change settings for Breakpoint. Please change all instances of `$breakpoint-#{$legacy}: {{setting}}` to `@include breakpoint-set('#{$new}', {{setting}})`. Variable settings, as well as this warning will be deprecated in a future release.\"\n    }\n  };\n\n  //////////////////////////////\n  // Hand correct each setting\n  //////////////////////////////\n  @if global-variable-exists('breakpoint-default-media') and $breakpoint-default-media != breakpoint-get('default media') {\n    @include breakpoint-set('default media', $breakpoint-default-media);\n  }\n  @if global-variable-exists('breakpoint-default-feature') and $breakpoint-default-feature != breakpoint-get('default feature') {\n    @include breakpoint-set('default feature', $breakpoint-default-feature);\n  }\n  @if global-variable-exists('breakpoint-force-media-all') and $breakpoint-force-media-all != breakpoint-get('force all media type') {\n    @include breakpoint-set('force all media type', $breakpoint-force-media-all);\n  }\n  @if global-variable-exists('breakpoint-to-ems') and $breakpoint-to-ems != breakpoint-get('to ems') {\n    @include breakpoint-set('to ems', $breakpoint-to-ems);\n  }\n  @if global-variable-exists('breakpoint-resolutions') and $breakpoint-resolutions != breakpoint-get('transform resolutions') {\n    @include breakpoint-set('transform resolutions', $breakpoint-resolutions);\n  }\n  @if global-variable-exists('breakpoint-no-queries') and $breakpoint-no-queries != breakpoint-get('no queries') {\n    @include breakpoint-set('no queries', $breakpoint-no-queries);\n  }\n  @if global-variable-exists('breakpoint-no-query-fallbacks') and $breakpoint-no-query-fallbacks != breakpoint-get('no query fallbacks') {\n    @include breakpoint-set('no query fallbacks', $breakpoint-no-query-fallbacks);\n  }\n  @if global-variable-exists('breakpoint-base-font-size') and $breakpoint-base-font-size != breakpoint-get('base font size') {\n    @include breakpoint-set('base font size', $breakpoint-base-font-size);\n  }\n  @if global-variable-exists('breakpoint-legacy-syntax') and $breakpoint-legacy-syntax != breakpoint-get('legacy syntax') {\n    @include breakpoint-set('legacy syntax', $breakpoint-legacy-syntax);\n  }\n}","//////////////////////////////\r\n// Default Settings\r\n//////////////////////////////\r\n$Singularity-Settings: (\r\n  'grids': (-1px: 12),\r\n  'gutters': (-1px: .25),\r\n  'gutter styles': (-1px: 'opposite'),\r\n  'output': 'isolation',\r\n  'direction': 'ltr',\r\n  'mobile first': true,\r\n  'include border box': false,\r\n  'include clearfix': false,\r\n  'background grid color': chocolate,\r\n  'asymmetric output': 'isolation',\r\n  'calc include min-width': true,\r\n  'debug': false\r\n);\r\n\r\n//////////////////////////////\r\n// User Settings\r\n//////////////////////////////\r\n$singularity: () !default;\r\n\r\n//////////////////////////////\r\n// Import General Helpers\r\n//////////////////////////////\r\n@import \"singularitygs/helpers\";\r\n\r\n//////////////////////////////\r\n// Import Language Helpers\r\n//////////////////////////////\r\n@import \"singularitygs/language\";\r\n\r\n//////////////////////////////\r\n// Import Math\r\n//////////////////////////////\r\n@import \"singularitygs/math\";\r\n\r\n//////////////////////////////\r\n// Import Grid Helpers\r\n//////////////////////////////\r\n@import \"singularitygs/grids\";\r\n\r\n//////////////////////////////\r\n// Import Gutters Helpers\r\n//////////////////////////////\r\n@import \"singularitygs/gutters\";\r\n\r\n//////////////////////////////\r\n// Import Gutter Styles\r\n//////////////////////////////\r\n@import \"singularitygs/gutter-styles\";\r\n\r\n//////////////////////////////\r\n// Import APIs\r\n//////////////////////////////\r\n@import \"singularitygs/api\";","//////////////////////////////\r\n// Setting Helpers\r\n//////////////////////////////\r\n@import \"helpers/settings\";\r\n\r\n//////////////////////////////\r\n// Code Helpers\r\n//////////////////////////////\r\n@import \"helpers/find\";\r\n@import \"helpers/sass-lists\";\r\n@import \"helpers/columns\";\r\n@import \"helpers/span-shared\";\r\n@import \"helpers/directions\";\r\n@import \"helpers/sort\";\r\n\r\n//////////////////////////////\r\n// UI Helpers\r\n//////////////////////////////\r\n@import \"helpers/background-grid\";\r\n\r\n//////////////////////////////\r\n// Layout Helpers\r\n//////////////////////////////\r\n@import \"helpers/layout\";","//////////////////////////////\r\n// Has Setting\r\n//////////////////////////////\r\n@function sgs-has($setting) {\r\n  @if map-has-key($singularity, $setting) {\r\n    @return true;\r\n  }\r\n  @else {\r\n    @return false;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n// Get Settings\r\n//////////////////////////////\r\n@function sgs-get($setting) {\r\n  @if sgs-has($setting) {\r\n    @return map-get($singularity, $setting);\r\n  }\r\n  @else {\r\n    @return map-get($Singularity-Settings, $setting);\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n// Set Settings\r\n//////////////////////////////\r\n@function sgs-set($setting, $value) {\r\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\r\n    @warn \"Words in Singularity settings should be spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\r\n  }\r\n  $singularity: map-merge($singularity, ($setting: $value)) !global;\r\n  @return true;\r\n}\r\n\r\n@mixin sgs-change($setting, $value) {\r\n  $sgs-change: sgs-set($setting, $value);\r\n}\r\n\r\n@mixin sgs-set($setting, $value) {\r\n  @include sgs-change($setting, $value);\r\n}\r\n\r\n//////////////////////////////\r\n// Remove Setting\r\n//////////////////////////////\r\n@function sgs-reset($settings...) {\r\n  @if length($settings) == 1 {\r\n    $settings: nth($settings, 1);\r\n  }\r\n\r\n  @each $setting in $settings {\r\n    $singularity: map-remove($singularity, $setting) !global;\r\n  }\r\n  @return true;\r\n}\r\n\r\n@mixin sgs-reset($settings...) {\r\n  $sgs-reset: sgs-reset($settings);\r\n}","//////////////////////////////\r\n// Find Object Keys\r\n//\r\n// Returns\r\n//////////////////////////////\r\n@function find-object-keys($haystack) {\r\n  $Keys: map-keys($haystack);\r\n  $List: ();\r\n  @each $Key in $Keys {\r\n    @if $Key != -1px {\r\n      @if unit($Key) == 'em' {\r\n        $Key: $Key / 1em * 16px;\r\n      }\r\n      $List: append($List, $Key);\r\n    }\r\n  }\r\n  @return quicksort($List);\r\n}\r\n\r\n//////////////////////////////\r\n// Find Object\r\n//\r\n// Finds relevant object\r\n// Must be using Breakpoint to work properly\r\n//////////////////////////////\r\n@function find-object($haystack, $user-object: null) {\r\n  // If a user object has been passed in, bypass the whole function and just return that object.\r\n  @if $user-object != null and $user-object != false {\r\n    @return $user-object;\r\n  }\r\n\r\n  $Length: length($haystack);\r\n  $Mobile-First: sgs-get('mobile first');\r\n\r\n  // Haystack must be map\r\n  @if type-of($haystack) != 'map' {\r\n    @warn \"DEPRECATION: In order to remove global variable naming conflicts, Singularity's settings have been moved into the single `$singularity` variable. Please refer to our documentation (https://github.com/Team-Sass/Singularity/wiki) on how to update your settings. In the next version of Singularity, this warning will be removed. #{nth($haystack, 1)} has been returned.\";\r\n    @return nth($haystack, 1);\r\n  }\r\n\r\n  // Grab Breakpoint Context\r\n  @if not function-exists(breakpoint-get-context) {\r\n    @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. First item used.\";\r\n    @return map-get($haystack, -1px);\r\n  }\r\n  // Get Breakpoint Contexts\r\n  $Query-Min: breakpoint-get-context('min-width');\r\n  $Query-Max: breakpoint-get-context('max-width');\r\n\r\n  @if length($Query-Min) == 1 {\r\n    $Query-Min: nth($Query-Min, 1);\r\n  }\r\n  @else if length($Query-Min) > 1 {\r\n    @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\r\n    @return map-get($haystack, -1px);\r\n  }\r\n\r\n\r\n  @if $Length > 1 {\r\n    @if length($Query-Max) == 1 {\r\n      $Query-Max: nth($Query-Max, 1);\r\n    }\r\n    @else if length($Query-Max) > 1 {\r\n      @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\r\n      @return map-get($haystack, -1px);\r\n    }\r\n\r\n    // If there is no min or max context, return first item\r\n    @if $Query-Min == false and $Query-Max == false {\r\n      $RETURN: map-get($haystack, -1px);\r\n      @return $RETURN;\r\n    }\r\n\r\n    // Convert to PX\r\n    @if $Query-Min != false and  unit($Query-Min) == 'em' {\r\n      $Query-Min: $Query-Min / 1em * 16px;\r\n    }\r\n    @if $Query-Max != false and unit($Query-Max) == 'em' {\r\n      $Query-Max: $Query-Max / 1em * 16px;\r\n    }\r\n\r\n    $Find-Haystack: find-object-keys($haystack);\r\n    $Reverse-Haystack: reverse($Find-Haystack);\r\n\r\n    $Smallest: nth($Find-Haystack, 1);\r\n    $Largest: nth($Reverse-Haystack, 1);\r\n    $Context: $Query-Min;\r\n\r\n    @if not $Mobile-First {\r\n      $Context: $Query-Max;\r\n    }\r\n\r\n    // Loop over each item in Context to find if any of the items pass.\r\n    @each $Query-Context in $Context {\r\n      @if $Query-Context != false {\r\n        // If it's smallest than the smallest MQ, use the 1st grid\r\n        @if $Query-Context < $Smallest {\r\n          $RETURN: map-get($haystack, -1px);\r\n          @return $RETURN;\r\n        }\r\n        // If it's larger than or equal to the largest MQ, use the last grid\r\n        @else if $Query-Context >= $Largest {\r\n          $RETURN: map-get($haystack, $Largest);\r\n          @return $RETURN;\r\n        }\r\n        // If it's in between the smallest and largest, go run a check.\r\n        @else {\r\n          // Loop through each MQ.\r\n          @for $j from 1 through length($Reverse-Haystack) {\r\n            $Query: nth($Reverse-Haystack, $j);\r\n\r\n            // If the MQ is greather than or equal to the the MQ in question, use it! (mobile first)\r\n            @if ($Mobile-First) {\r\n              @if $Query-Context >= $Query {\r\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\r\n                @return $RETURN;\r\n              }\r\n            }\r\n            // If the MQ is less than or equal to the the MQ in question, use it! (not mobile first)\r\n            @else {\r\n              @if $Query-Context <= $Query {\r\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\r\n                @return $RETURN;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // All else fails, return the first item\r\n  @else {\r\n    $RETURN: map-get($haystack, -1px);\r\n    @return $RETURN;\r\n  }\r\n}","// ---------------------------------------------------------------------------\r\n// Sass List Helpers\r\n//\r\n// - list-sum()\r\n// - query-list()\r\n\r\n// ---------------------------------------------------------------------------\r\n// Functions\r\n\r\n// Return the sum of all items in a list.\r\n//\r\n// list-sum($list)\r\n// - $list  : <list>\r\n@function list-sum($list) {\r\n  $sum: 0;\r\n  @each $item in $list {\r\n    $sum: $sum + $item;\r\n  }\r\n  @return $sum;\r\n}\r\n\r\n// Return list of index locations where a query appears in a list,\r\n// including unit queries.\r\n//\r\n// query-list($list, $query [, $mode])\r\n// - $list    : <list>\r\n// - $query   : <anything>\r\n// - $mode    : none | unit\r\n//            - \"none\" (default) runs a standard query.\r\n//            - \"unit\" finds all items with the same unit.\r\n@function query-list(\r\n  $list,\r\n  $query,\r\n  $mode: none\r\n) {\r\n  $return: ();\r\n\r\n  // loop through $list\r\n  @for $i from 1 through length($list) {\r\n    @if $mode == unit {\r\n      // if the list item matches the query, write where it is to the list.\r\n      @if unit(nth($list, $i)) == $query {\r\n        $return: append($return, $i);\r\n      }\r\n    }\r\n    @else {\r\n      // if the list item matches the query, write where it is to the list.\r\n      @if nth(nth($list, $i), 1) == $query {\r\n        $return: append($return, $i);\r\n      }\r\n    }\r\n  }\r\n\r\n  // if nothing matches then return false.\r\n  @if $return == () {\r\n    $return: false;\r\n  }\r\n\r\n  // return list.\r\n  @return $return;\r\n}\r\n\r\n// Reverses direction of a list\r\n@function reverse($list) {\r\n  $length: length($list);\r\n  $return: ();\r\n  @for $i from 0 to $length {\r\n    $return: append($return, nth($list, $length - $i));\r\n  }\r\n  @return $return;\r\n}","@function end-row($span, $location, $columns) {\r\n  @if $location == 'last' or $location == 'omega' {\r\n    @return true;\r\n  }\r\n  @else {\r\n    @if $location + ($span - 1) == column-count($columns) {\r\n      @return true;\r\n    }\r\n    @else {\r\n      @return false;\r\n    }\r\n  }\r\n}\r\n\r\n@function start-row($location) {\r\n  @if $location == 'first' or $location == 'alpha' {\r\n    @return true;\r\n  }\r\n  @else if $location == 1 {\r\n    @return true;\r\n  }\r\n  @else {\r\n    @return false;\r\n  }\r\n}","@mixin span-shared {\r\n  $include-border-box: sgs-get('include border box');\r\n  $include-clearfix: sgs-get('include clearfix');\r\n\r\n  @if $include-border-box {\r\n    @if mixin-exists(box-sizing) {\r\n      @include box-sizing(border-box);\r\n    }\r\n    @else {\r\n      -moz-box-sizing: border-box;\r\n      box-sizing: border-box;\r\n    }\r\n  }\r\n\r\n  @if $include-clearfix {\r\n    @if mixin-exists(clearfix) {\r\n      @include clearfix;\r\n    }\r\n    @else {\r\n      &:after {\r\n        content: \"\";\r\n        display: table;\r\n        clear: both;\r\n      }\r\n    }\r\n  }\r\n}","//////////////////////////////\r\n// Find Opposite Direction\r\n//////////////////////////////\r\n@function opposite-direction($dir) {\r\n  @if $dir == 'left' {\r\n    @return right;\r\n  }\r\n  @else if  $dir == 'right' {\r\n    @return left;\r\n  }\r\n  @else if $dir == 'ltr' {\r\n    @return rtl;\r\n  }\r\n  @else if $dir == 'rtl' {\r\n    @return ltr;\r\n  }\r\n  @else if $dir == 'top' {\r\n    @return bottom;\r\n  }\r\n  @else if $dir == 'bottom' {\r\n    @return top;\r\n  }\r\n  @else {\r\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\r\n    @return false;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n// Find Direction Name\r\n//////////////////////////////\r\n@function named-direction($dir) {\r\n  @if $dir == 'ltr' {\r\n    @return left;\r\n  }\r\n  @else if $dir == 'rtl' {\r\n    @return right;\r\n  }\r\n  @else {\r\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\r\n    @return false;\r\n  }\r\n}","//////////////////////////////\r\n// Quicksort\r\n// http://rosettacode.org/wiki/Sorting_algorithms/Quicksort\r\n//////////////////////////////\r\n@function quicksort($list) {\r\n\r\n  $QS-Less: ();\r\n  $QS-Equal: ();\r\n  $QS-Large: ();\r\n\r\n  $QS-Length: length($list);\r\n\r\n  $QS-Seed: round($QS-Length / 2);\r\n\r\n  @if $QS-Length > 1 {\r\n    $QS-Seed: nth($list, $QS-Seed);\r\n    @each $Item in $list {\r\n      @if $Item < $QS-Seed {\r\n        $QS-Less: append($QS-Less, $Item);\r\n      }\r\n      @else if $Item == $QS-Seed {\r\n        $QS-Equal: append($QS-Equal, $Item);\r\n      }\r\n      @else {\r\n        $QS-Large: append($QS-Large, $Item);\r\n      }\r\n    }\r\n    $QS-Less: quicksort($QS-Less);\r\n    $QS-Large: quicksort($QS-Large);\r\n\r\n    $QS-Return: join($QS-Less, $QS-Equal);\r\n    $QS-Return: join($QS-Return, $QS-Large);\r\n\r\n    @return $QS-Return;\r\n  }\r\n\r\n  @return $list;\r\n}\r\n\r\n//////////////////////////////\r\n// Sort Map function\r\n//////////////////////////////\r\n@function sort-map($map, $reverse: false) {\r\n  $Sort-Map-Keys: quicksort(map-keys($map));\r\n  $Sort-Map-Map: ();\r\n\r\n  @if $reverse {\r\n    $Sort-Map-Keys: reverse($Sort-Map-Keys);\r\n  }\r\n\r\n  @each $key in $Sort-Map-Keys {\r\n    $Sort-Map-Map: map-merge($Sort-Map-Map, ($key: map-get($map, $key)));\r\n  }\r\n\r\n  @return $Sort-Map-Map;\r\n}","// -----------------------------------------------\r\n// Grid Background\r\n\r\n@import 'str-replace';\r\n\r\n@mixin background-grid(\r\n  $columns: null,\r\n  $gutter: null,\r\n  $gutter-style: null,\r\n  $color: null\r\n) {\r\n\r\n  $color: if($color != null, $color, sgs-get('background grid color'));\r\n\r\n  @if sgs-get('debug') != false {\r\n    $columns: if($columns != null, $columns, sgs-get('grids'));\r\n    $gutter: if($gutter != null, $gutter, sgs-get('gutters'));\r\n    $gutter-style: if($gutter-style != null, $gutter-style, sgs-get('gutter styles'));\r\n\r\n    @include background-build($columns, $gutter, $gutter-style, $color)\r\n  }\r\n}\r\n\r\n@function background-map($columns, $gutters, $gutter-styles) {\r\n  $Grids: ();\r\n  $Gutters: ();\r\n  $Styles: ();\r\n\r\n  @if $columns and type-of($columns) != 'map' {\r\n    $Grids: (-1px: $columns);\r\n  }\r\n  @else {\r\n    $Grids: sgs-get('grids');\r\n  }\r\n\r\n  @if $gutters and type-of($gutters) != 'map' {\r\n    $Gutters: (-1px: $gutters);\r\n  }\r\n  @else {\r\n    $Gutters: sgs-get('gutters');\r\n  }\r\n\r\n  @if $gutter-styles and type-of($gutter-styles) != 'map' {\r\n    $Styles: (-1px: $gutter-styles);\r\n  }\r\n  @else {\r\n    $Styles: sgs-get('gutter styles');\r\n  }\r\n\r\n  // Build 1st Depth Map\r\n  $Holder: ();\r\n\r\n  // Grids\r\n  @each $k, $v in $Grids {\r\n    $Holder: map-merge($Holder, ($k: ('grid': $v)));\r\n  }\r\n  // Gutters\r\n  @each $k, $v in $Gutters {\r\n    $Grid: map-get($Holder, $k);\r\n\r\n    $Map: ('gutter': $v);\r\n    @if $Grid != null {\r\n      $Grid: map-get($Grid, 'grid');\r\n      @if $Grid != null {\r\n        $Map: map-merge($Map, ('grid': $Grid));\r\n      }\r\n    }\r\n\r\n    $Holder: map-merge($Holder, ($k: $Map));\r\n  }\r\n  // Style\r\n  @each $k, $v in $Styles {\r\n    $Grid: map-get($Holder, $k);\r\n    $Gutter: map-get($Holder, $k);\r\n\r\n    $Map: ('style': $v);\r\n    @if $Grid != null {\r\n      $Grid: map-get($Grid, 'grid');\r\n      @if $Grid != null {\r\n        $Map: map-merge($Map, ('grid': $Grid));\r\n      }\r\n    }\r\n    @if $Gutter != null {\r\n      $Gutter: map-get($Gutter, 'gutter');\r\n      @if $Gutter != null {\r\n        $Map: map-merge($Map, ('gutter': $Gutter));\r\n      }\r\n    }\r\n\r\n    $Holder: map-merge($Holder, ($k: $Map));\r\n  }\r\n\r\n  $Holder: sort-map($Holder);\r\n  $Return: ();\r\n\r\n  // Build full stack for each breakpoint\r\n  @for $i from 1 through length($Holder) {\r\n    $Key: nth(nth($Holder, $i), 1);\r\n    $Value: nth(nth($Holder, $i), 2);\r\n\r\n    $Previous: ();\r\n    @if $i > 1 {\r\n      $Previous: nth(nth($Return, $i - 1), 2);\r\n    }\r\n\r\n    @if not map-has-key($Value, 'grid') {\r\n      $Sort-Grid: map-get($Previous, 'grid');\r\n      $Value: map-merge($Value, ('grid': $Sort-Grid));\r\n    }\r\n\r\n    @if not map-has-key($Value, 'gutter') {\r\n      $Sort-Gutter: map-get($Previous, 'gutter');\r\n      $Value: map-merge($Value, ('gutter': $Sort-Gutter));\r\n    }\r\n\r\n    @if not map-has-key($Value, 'style') {\r\n      $Sort-Style: map-get($Previous, 'style');\r\n      $Value: map-merge($Value, ('style': $Sort-Style));\r\n    }\r\n\r\n    $Return: map-merge($Return, ($Key: $Value));\r\n  }\r\n\r\n  @return $Return;\r\n}\r\n\r\n@mixin background-build($columns, $gutters, $gutter-styles, $color) {\r\n  $Background-Map: background-map($columns, $gutters, $gutter-styles);\r\n  $Display: true;\r\n\r\n  $Column-Color: $color;\r\n  $Inverse-Column-Color: mix(black, $color, 15%);\r\n  $Gutter-Color: mix(white, $color, 25%);\r\n  $Direction: named-direction(sgs-get('direction'));\r\n\r\n  @each $bkpt, $def in $Background-Map {\r\n    $Grid: map-get($def, 'grid');\r\n    $Gutter: map-get($def, 'gutter');\r\n    $Style: map-get($def, 'style');\r\n\r\n    $Grid-Count: column-count($Grid);\r\n\r\n    $SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\">';\r\n\r\n    $Gutter-Width: gutter-span($Gutter, $Grid, $Style);\r\n    @if unit($Gutter-Width) != '%' and unit($Gutter-Width) != '' {\r\n      $Gutter-Width: 0%;\r\n    }\r\n\r\n    @if $Style == 'fixed' {\r\n      $Gutter-Width: 0%;\r\n    }\r\n    $Counter-Width: 0%;\r\n    $holder: ();\r\n\r\n    @for $i from 1 through $Grid-Count {\r\n      $Holder-Gradient: ();\r\n      $Loop-Width: column-span(1, $i, $Grid, $Gutter, $Style);\r\n\r\n      @if index($Style, 'split') and $i == 1 {\r\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\r\n        $Counter-Width: ($Gutter-Width / 2);\r\n      }\r\n\r\n      $Loop-Color: $Column-Color;\r\n      @if (index($Style, 'fixed') or $Gutter-Width == 0%) and ($i % 2 == 0 ) {\r\n        $Loop-Color: $Inverse-Column-Color;\r\n      }\r\n\r\n      @if $i != $Grid-Count {\r\n        @if unit($Counter-Width) == unit($Loop-Width) {\r\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\r\n          $Counter-Width: $Counter-Width + $Loop-Width;\r\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\r\n          $Counter-Width: $Counter-Width + $Gutter-Width;\r\n        }\r\n        @else {\r\n          $Display: false;\r\n        }\r\n\r\n      }\r\n      @else if $i == 1 {\r\n        @if unit($Counter-Width) == unit($Loop-Width) {\r\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\r\n          $SVG: $SVG + '<rect x=\"#{$Loop-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\r\n          $Counter-Width: $Counter-Width + $Loop-Width + $Gutter-Width;\r\n        }\r\n        @else {\r\n          $Display: false;\r\n        }\r\n\r\n      }\r\n      @else if $i == $Grid-Count and index($Style, 'split') {\r\n        @if unit($Counter-Width) == unit($Loop-Width) {\r\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\r\n          $Counter-Width: $Counter-Width + $Loop-Width;\r\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\r\n        }\r\n        @else {\r\n          $Display: false;\r\n        }\r\n      }\r\n      @else {\r\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\r\n      }\r\n    }\r\n\r\n    $SVG: $SVG + '</svg>';\r\n    $SVG: url-encode($SVG);\r\n\r\n    @if $Display {\r\n\r\n      @if $bkpt != -1px {\r\n        @include breakpoint($bkpt) {\r\n          background-image: url('data:image/svg+xml,' + $SVG);\r\n        }\r\n      }\r\n      @else {\r\n        background-image: url('data:image/svg+xml,' + $SVG);\r\n      }\r\n    }\r\n    @else {\r\n      @warn 'Cannot generate a Background Grid for grid `#{$Grid}` with gutters `#{$Gutter}` and gutter style `#{$Style}`';\r\n    }\r\n  }\r\n}","// From http://sassmeister.com/gist/1b4f2da5527830088e4d\r\n\r\n////\r\n// I have written a lot of different `str-replace` Sass functions over\r\n// the months yet none of my tries were succeeding in making the new substring\r\n// able to contain the one to replace (e.g. `str-replace($str, 'a', 'ab')`).\r\n// Thanks to Valérian Galliat (@valeriangalliat), I finally managed to build\r\n// a bulletproof `str-replace` Sass function that allows new string to contain\r\n// the old one.\r\n////\r\n\r\n/// Replace `$search` with `$replace` in `$string`\r\n/// @param {String} $string - Initial string\r\n/// @param {String} $search - Substring to replace\r\n/// @param {String} $replace ('') - New value\r\n/// @return {String} - Updated string\r\n@function str-replace($string, $search, $replace: '') {\r\n  $index: str-index($string, $search);\r\n\r\n  @if $index {\r\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n  }\r\n\r\n  @return $string;\r\n}\r\n\r\n@function url-encode($string) {\r\n  $encodeMap:('%':'%25',\r\n              ' ':'%20',\r\n              '!':'%21',\r\n              '\\\"':'%22',\r\n              '#':'%23',\r\n              '$':'%24',\r\n              '&':'%26',\r\n              '\\'':'%27',\r\n              '(':'%28',\r\n              ')':'%29',\r\n              '*':'%2A',\r\n              '+':'%2B',\r\n              ',':'%2C',\r\n              '-':'%2D',\r\n              '.':'%2E',\r\n              '/':'%2F',\r\n              ':':'%3A',\r\n              ';':'%3B',\r\n              '<':'%3C',\r\n              '=':'%3D',\r\n              '>':'%3E',\r\n              '?':'%3F',\r\n              '@':'%40',\r\n              '[':'%5B',\r\n              '\\\\':'%5C',\r\n              ']':'%5D',\r\n              '^':'%5E',\r\n              '_':'%5F',\r\n              '`':'%60',\r\n              '{':'%7B',\r\n              '|':'%7C',\r\n              '}':'%7D',\r\n              '~':'%7E',\r\n              '¢':'%A2',\r\n              '£':'%A3',\r\n              '¥':'%A5',\r\n              '§':'%A7',\r\n              '«':'%AB',\r\n              '¬':'%AC',\r\n              '¯':'%AD',\r\n              'º':'%B0',\r\n              '±':'%B1',\r\n              'ª':'%B2',\r\n              'µ':'%B5',\r\n              '»':'%BB',\r\n              '¼':'%BC',\r\n              '½':'%BD',\r\n              '¿':'%BF',\r\n              'À':'%C0',\r\n              'Á':'%C1',\r\n              'Â':'%C2',\r\n              'Ã':'%C3',\r\n              'Ä':'%C4',\r\n              'Å':'%C5',\r\n              'Æ':'%C6',\r\n              'Ç':'%C7',\r\n              'È':'%C8',\r\n              'É':'%C9',\r\n              'Ê':'%CA',\r\n              'Ë':'%CB',\r\n              'Ì':'%CC',\r\n              'Í':'%CD',\r\n              'Î':'%CE',\r\n              'Ï':'%CF',\r\n              'Ð':'%D0',\r\n              'Ñ':'%D1',\r\n              'Ò':'%D2',\r\n              'Ó':'%D3',\r\n              'Ô':'%D4',\r\n              'Õ':'%D5',\r\n              'Ö':'%D6',\r\n              'Ø':'%D8',\r\n              'Ù':'%D9',\r\n              'Ú':'%DA',\r\n              'Û':'%DB',\r\n              'Ü':'%DC',\r\n              'Ý':'%DD',\r\n              'Þ':'%DE',\r\n              'ß':'%DF',\r\n              'à':'%E0',\r\n              'á':'%E1',\r\n              'â':'%E2',\r\n              'ã':'%E3',\r\n              'ä':'%E4',\r\n              'å':'%E5',\r\n              'æ':'%E6',\r\n              'ç':'%E7',\r\n              'è':'%E8',\r\n              'é':'%E9',\r\n              'ê':'%EA',\r\n              'ë':'%EB',\r\n              'ì':'%EC',\r\n              'í':'%ED',\r\n              'î':'%EE',\r\n              'ï':'%EF',\r\n              'ð':'%F0',\r\n              'ñ':'%F1',\r\n              'ò':'%F2',\r\n              'ó':'%F3',\r\n              'ô':'%F4',\r\n              'õ':'%F5',\r\n              'ö':'%F6',\r\n              '÷':'%F7',\r\n              'ø':'%F8',\r\n              'ù':'%F9',\r\n              'ú':'%FA',\r\n              'û':'%FB',\r\n              'ü':'%FC',\r\n              'ý':'%FD',\r\n              'þ':'%FE',\r\n              'ÿ':'%FF'\r\n  );\r\n\r\n  @each $char, $code in $encodeMap  {\r\n    $string: str-replace($string, $char, $code);\r\n  }\r\n  @return $string;\r\n}","//////////////////////////////\r\n// Wrapper mixin for overriding the global contexts as a block\r\n//////////////////////////////\r\n@mixin layout($grid: false, $gutter: false, $output-style: false, $gutter-style: false) {\r\n\r\n  @if type-of($grid) == 'map' {\r\n    $layout: $grid;\r\n    @if map-has-key($layout, 'grid') {\r\n      $grid: map-get($layout, 'grid');\r\n    }\r\n\r\n    @if map-has-key($layout, 'gutter') {\r\n      $gutter: map-get($layout, 'gutter');\r\n    }\r\n\r\n    @if map-has-key($layout, 'output style') {\r\n      $output-style: map-get($layout, 'output style');\r\n    }\r\n    @if map-has-key($layout, 'output') {\r\n      $output-style: map-get($layout, 'output');\r\n    }\r\n\r\n    @if map-has-key($layout, 'gutter style') {\r\n      $gutter-style: map-get($layout, 'gutter style');\r\n    }\r\n  }\r\n\r\n  // Private holder for current global context\r\n  $layout-private-grid-holder: sgs-get('grids');\r\n  $layout-private-gutter-holder: sgs-get('gutters');\r\n  $layout-private-output-holder: sgs-get('output');\r\n  $layout-private-gutter-style-holder: sgs-get('gutter styles');\r\n\r\n  // Overides current global contexts, but only if needed\r\n  @if $grid != false {\r\n    @include sgs-reset('grids');\r\n    @if type-of($grid) != 'map' {\r\n      @include sgs-change('grids', (-1px: $grid));\r\n    }\r\n    @else {\r\n      @include sgs-change('grids', $grid);\r\n    }\r\n  }\r\n  @if $gutter != false {\r\n    @include sgs-reset('gutters');\r\n    @if type-of($gutter) != 'map' {\r\n      @include sgs-change('gutters', (-1px: $gutter));\r\n    }\r\n    @else {\r\n      @include sgs-change('gutters', $gutter);\r\n    }\r\n  }\r\n  @if $output-style != false {\r\n    @include sgs-reset('output');\r\n    @include sgs-change('output', $output-style);\r\n  }\r\n  @if $gutter-style != false {\r\n    @include sgs-reset('gutter styles');\r\n    @if type-of($gutter-style) != 'map' {\r\n      @include sgs-change('gutter styles', (-1px: $gutter-style));\r\n    }\r\n    @else {\r\n      @include sgs-change('gutter styles', $gutter-style);\r\n    }\r\n  }\r\n\r\n  // All the things!\r\n  @content;\r\n\r\n  // REset ALL the settings\r\n  @include sgs-reset('grids');\r\n  @include sgs-reset('gutters');\r\n  @include sgs-reset('output');\r\n  @include sgs-reset('gutter styles');\r\n  // Resets global contexts\r\n  @include sgs-change('grids', $layout-private-grid-holder);\r\n  @include sgs-change('gutters', $layout-private-gutter-holder);\r\n  @include sgs-change('output', $layout-private-output-holder);\r\n  @include sgs-change('gutter styles', $layout-private-gutter-style-holder);\r\n}\r\n\r\n//////////////////////////////\r\n// Layout At\r\n// Wrapper mixin for a combined Breakpoint/Layout call\r\n//////////////////////////////\r\n@mixin layout-at($layout, $breakpoint) {\r\n  @include breakpoint($breakpoint) {\r\n    // If a single value is passed in, assume it's a grid\r\n    @if type-of($layout) != map {\r\n      @include layout($layout) {\r\n        @content;\r\n      }\r\n    }\r\n    // If it is a map, we've got key/values to work with\r\n    @else {\r\n      $grid: false;\r\n      $gutter: false;\r\n      $output-style: false;\r\n      $gutter-style: false;\r\n\r\n      @if map-has-key($layout, 'grid') {\r\n        $grid: map-get($layout, 'grid');\r\n      }\r\n\r\n      @if map-has-key($layout, 'gutter') {\r\n        $gutter: map-get($layout, 'gutter');\r\n      }\r\n\r\n      @if map-has-key($layout, 'output style') {\r\n        $output-style: map-get($layout, 'output style');\r\n      }\r\n      @if map-has-key($layout, 'output') {\r\n        $output-style: map-get($layout, 'output');\r\n      }\r\n\r\n      @if map-has-key($layout, 'gutter style') {\r\n        $gutter-style: map-get($layout, 'gutter style');\r\n      }\r\n\r\n      @include layout($grid, $gutter, $output-style, $gutter-style) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}","@import \"language/parse-list\";\r\n@import \"language/parse-add\";\r\n@import \"language/span\";","//////////////////////////////\r\n// Parse natural language string\r\n//\r\n// Retrieve values from the natural language string.\r\n// parse-string($var, $list)\r\n//  $var  : <string>\r\n//        - 'at'/'span'/'of' or any other keywords.\r\n//        - 'span' queries the unprefixed span declaration.\r\n//        - 'at' can also query first, last, alpha, and omega.\r\n//        - 'grid' will return the same as 'of'\r\n//  $list : <list>\r\n//        - A list like this: last 2 of (1 1 2) push 1\r\n//\r\n//////////////////////////////\r\n@function parse-span-list($var, $list) {\r\n\r\n  $found: false;\r\n\r\n  $grid: ();\r\n\r\n  // Loop through list.\r\n  @each $item in $list {\r\n    // if 'span' - return the first numeric.\r\n    // if keyword was found - return the following item.\r\n    @if (type-of($item) == number and $var == span and $found != 'grid') or $found == true {\r\n\r\n      // @if $found == true\r\n      @return $item;\r\n    }\r\n\r\n    // Special handling for Grids\r\n    @else if ($item == $var or $item == 'grid' or $item == 'of') and ($var == 'of' or $var == 'grid') {\r\n      $found: 'grid';\r\n    }\r\n\r\n    @else if $found == 'grid' {\r\n      @if type-of($item) == number {\r\n        $grid: append($grid, $item, 'space');\r\n      }\r\n      @else {\r\n        @return $grid;\r\n      }\r\n    }\r\n\r\n    // Any keyword - return the following value.\r\n    @else if $item == $var {\r\n      $found: true;\r\n    }\r\n  }\r\n\r\n  // Wasn't found.\r\n  @return false;\r\n}","//////////////////////////////\r\n// Parse add string\r\n//\r\n// Retrieve add and media query values from a definition\r\n// parse-add($definition)\r\n//  $definition : <list>\r\n//        - A list like: .25 at 300px\r\n//\r\n//////////////////////////////\r\n@function parse-add($definition) {\r\n  $parse-find: ();\r\n  $parse-mq: null;\r\n  $parse-mq-find: false;\r\n  $Mobile-First: sgs-get('mobile first');\r\n\r\n  @each $item in $definition {\r\n    @if $item != 'at' and $parse-mq-find != true {\r\n      $parse-find: append($parse-find, $item, 'space');\r\n    }\r\n    @else if $item == 'at' {\r\n      $parse-mq-find: true;\r\n    }\r\n    @else {\r\n      $parse-mq: $item;\r\n    }\r\n  }\r\n\r\n  @if $parse-mq {\r\n    @if not function-exists(breakpoint) {\r\n      @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. Context set to -1px.\";\r\n      $parse-mq: -1px;\r\n    }\r\n    @else {\r\n      $breakpoint-parse: breakpoint($parse-mq);\r\n      $breakpoint-parse: map-get($breakpoint-parse, 'context holder');\r\n      $breakpoint-mq: null;\r\n      @if $Mobile-First {\r\n        $breakpoint-mq: map-get($breakpoint-parse, 'min-width');\r\n      }\r\n      @else {\r\n        $breakpoint-mq: map-get($breakpoint-parse, 'max-width');\r\n      }\r\n\r\n      @if length($breakpoint-mq) > 1 {\r\n        @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Context set to -1px.\";\r\n        $parse-mq: -1px;\r\n      }\r\n      @else if length($breakpoint-mq) < 1 {\r\n        @warn \"No \" + if($Mobile-First, 'min-width', 'max-width') + ' context found. Please use a media query with the correct context. Context set to -1px.';\r\n        $parse-mq: -1px;\r\n      }\r\n      @else {\r\n        $parse-mq: nth($breakpoint-mq, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  @if $parse-mq and unit($parse-mq) == 'em' {\r\n    $parse-mq: $parse-mq / 1em * 16px;\r\n  }\r\n\r\n  @return ($parse-find $parse-mq);\r\n}\r\n","//////////////////////////////\r\n// \"Natural Language\" Parsing\r\n//\r\n// Keywords:\r\n//  span:     Column Span\r\n//  at:       Column Location\r\n//  of:       Context\r\n//  gutters:  Gutters\r\n//  output:   Output\r\n//////////////////////////////\r\n@mixin span($input) {\r\n  $span:      nth($input, 1);\r\n\r\n  $location:  parse-span-list('at', $input);\r\n  $context:   parse-span-list('of', $input);\r\n  $gutter:    parse-span-list('gutters', $input);\r\n  $output:    parse-span-list('output', $input);\r\n\r\n  @include grid-span($span, $location, $context, $gutter, $output)\r\n}","@import \"math/columns\";\r\n@import \"math/gutters\";\r\n@import \"math/context\";\r\n@import \"math/grid\";","//////////////////////////////\r\n// Find width, in percentages, of the column span\r\n//////////////////////////////\r\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\r\n  // Find the grid and gutters\r\n  $grid: find-grid($grid);\r\n  $gutter: find-gutter($gutter);\r\n  $gutter-style: find-gutter-style($gutter-style);\r\n\r\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\r\n    $gutter: 0;\r\n  }\r\n\r\n  // @debug $grid;\r\n  // @debug $gutter;\r\n\r\n  // Combine the grid and gutters\r\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\r\n\r\n  // @debug $grid-and-gutters;\r\n\r\n  // Equal width grid are easy! Deal with them!\r\n  @if type-of($grid) == 'number' or length($grid) == 1 {\r\n    $span-and-gutters: $span + $gutter * ($span - 1);\r\n    @return $span-and-gutters / $grid-and-gutters * 100%;\r\n  }\r\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\r\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\r\n    $span-and-gutters: 0;\r\n\r\n    @if $location == 1 and $span >= 1 {\r\n      @for $i from 1 through $span {\r\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\r\n      }\r\n    }\r\n    @else {\r\n      $total: $location + $span - 1;\r\n      @if $total != 0 {\r\n        @for $i from $location through $total {\r\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\r\n        }\r\n      }\r\n    }\r\n    $span-and-gutters: $span-and-gutters - $gutter;\r\n\r\n    @return $span-and-gutters / $grid-and-gutters * 100%;\r\n  }\r\n  @else {\r\n    @warn \"Can't find a working set of grid! That's terrible!\";\r\n    @return false;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n// Find the total sum of the grid\r\n//////////////////////////////\r\n@function column-sum($grid, $gutter, $gutter-style) {\r\n  $split: if(index($gutter-style, 'split'), true, false);\r\n\r\n  @if type-of($grid) == 'number' or length($grid) == 1 {\r\n    @if $split {\r\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\r\n    }\r\n    @else {\r\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\r\n    }\r\n\r\n  }\r\n  @else if type-of($grid) == 'list' {\r\n    $sum: 0;\r\n    @each $column in $grid {\r\n      $sum: $sum + nth($column, 1);\r\n    }\r\n    @if $split {\r\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\r\n    }\r\n    @else {\r\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\r\n    }\r\n    @return $sum;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n// Find the number of grid\r\n//////////////////////////////\r\n@function column-count($grid) {\r\n  @if type-of($grid) == 'number' {\r\n    @return $grid;\r\n  }\r\n  @if type-of($grid) == 'list' {\r\n    @if length($grid) == 1 {\r\n      @return nth($grid, 1);\r\n    }\r\n    @else {\r\n      @return length($grid);\r\n    }\r\n  }\r\n}","@function gutter-span($gutter: false, $grid: false, $gutter-style: false) {\r\n\r\n  // Find the columns and gutters\r\n  $grid: find-grid($grid);\r\n  $gutter: find-gutter($gutter);\r\n  $gutter-style: find-gutter-style($gutter-style);\r\n\r\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\r\n    @return nth($gutter, 1);\r\n  }\r\n\r\n  // Combine the columns and gutters\r\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\r\n\r\n  @return (nth($gutter, 1) / $grid-and-gutters) * 100%\r\n}","@function context($primary, $secondary) {\r\n  @return ($primary / $secondary) * 100%;\r\n}","@function grid-span($span, $location, $grid: false, $gutter: false, $gutter-style: false) {\r\n  @return column-span($span, $location, $grid, $gutter, $gutter-style) + gutter-span($gutter, $grid, $gutter-style);\r\n}","@import \"grids/add\";\r\n@import \"grids/find\";","// Accepts a grid definition in the human-readable format. Converts it to the internal format,\r\n// appends it to a list of grids and returns the resulting list.\r\n//\r\n// Note that this function only returns a new list, it does not modify the source list.\r\n//\r\n// add-grid($grid-definition, $append-to-list)\r\n// - $grid-definition : <definition>  See documentation for syntax:\r\n//                                    https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\r\n// - $append-to-list  : [list]        A list to append to.\r\n//                                    Defaults to $grids if none is specified.\r\n@function add-grid($grid-definition, $custom-map: false) {\r\n  $Parsed:      parse-add($grid-definition); // Parses grid definition to grid/breakpoint\r\n  $Grid:        nth($Parsed, 1); // E. g. `(<grid>)`.\r\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\r\n  $Mobile-First: sgs-get('mobile first');\r\n  $Grid-Map: ();\r\n\r\n  // Determine if a custom map or the default maps should be used.\r\n  @if $custom-map {\r\n    $Grid-Map: $custom-map;\r\n  }\r\n  @else {\r\n    @if sgs-has('grids') {\r\n      $Grid-Map: sgs-get('grids');\r\n    }\r\n  }\r\n  $Grid-Key-Length: length(map-keys($Grid-Map));\r\n\r\n  // Check whether the definition will be the first one in the list\r\n  // and whether it has no breakpoint specified.\r\n  @if $Breakpoint == null {\r\n    // Returns the first item of the list, e. g. `(<grid>)`\r\n    $Grid-Map: map-merge($Grid-Map, (-1px: $Grid));\r\n  }\r\n  // IF the list is initiated with a list of grid columns need to start off\r\n  // a comma seprated list.\r\n  @else {\r\n    @if not (map-has-key($Grid-Map, -1px)) {\r\n      $Grid-Map: map-merge($Grid-Map, map-get($Singularity-Settings, 'grids'));\r\n    }\r\n    $Grid-Map: map-merge($Grid-Map, ($Breakpoint: $Grid));\r\n  }\r\n\r\n  $Grid-Map: sort-map($Grid-Map, not $Mobile-First);\r\n\r\n  @return $Grid-Map;\r\n}\r\n\r\n\r\n@mixin add-grid($grid-definition) {\r\n  $Add-Grid: add-grid($grid-definition);\r\n  $HOLDER: sgs-set('grids', $Add-Grid);\r\n}","//////////////////////////////\r\n// Find Grid\r\n//\r\n// Finds the grid that you are on.\r\n// From Singularity\r\n// Must be using Breakpoint to work properly\r\n//////////////////////////////\r\n@function find-grid($user-columns: null) {\r\n\r\n  // We supply a default if the user hasn't set any grids and hasn't passed in a custom column set\r\n  // The default supplied is based on original Susy options\r\n  $Grids: sgs-get('grids');\r\n\r\n  $Found: find-object($Grids, $user-columns);\r\n\r\n  @if length($Found) == 1 {\r\n    $Found: nth($Found, 1);\r\n  }\r\n\r\n  @return $Found;\r\n}","@import \"gutters/add\";\r\n@import \"gutters/find\";","// Accepts a gutter definition in the human-readable format. Converts it to the internal format,\r\n// appends it to a list of gutter and returns the resulting list.\r\n//\r\n// Note that this function only returns a new list, it does not modify the source list.\r\n//\r\n// add-gutter($Gutter-definition, $append-to-list)\r\n// - $gutter-definition : <definition>  See documentation for syntax:\r\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Gutters\r\n// - $append-to-list    : [list]        A list to append to.\r\n//                                      Defaults to $gutters if none is specified.\r\n@function add-gutter($gutter-definition, $custom-map: false) {\r\n  $Parsed:      parse-add($gutter-definition); // Parses Gutter definition to Gutter/breakpoint\r\n  $Gutter:        nth($Parsed, 1); // E. g. `(<Gutter>)`.\r\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\r\n  $Mobile-First: sgs-get('mobile first');\r\n  $Gutter-Map: ();\r\n\r\n  // Determine if a custom map or the default maps should be used.\r\n  @if $custom-map {\r\n    $Gutter-Map: $custom-map;\r\n  }\r\n  @else {\r\n    @if sgs-has('gutters') {\r\n      $Gutter-Map: sgs-get('gutters');\r\n    }\r\n  }\r\n  $Gutter-Key-Length: length(map-keys($Gutter-Map));\r\n\r\n  // Check whether the definition will be the first one in the list\r\n  // and whether it has no breakpoint specified.\r\n  @if $Breakpoint == null {\r\n    // Returns the first item of the list, e. g. `(<Gutter>)`\r\n    $Gutter-Map: map-merge($Gutter-Map, (-1px: $Gutter));\r\n  }\r\n  // IF the list is initiated with a list of Gutter columns need to start off\r\n  // a comma seprated list.\r\n  @else {\r\n    @if not (map-has-key($Gutter-Map, -1px)) {\r\n      $Gutter-Map: map-merge($Gutter-Map, map-get($Singularity-Settings, 'gutters'));\r\n    }\r\n    $Gutter-Map: map-merge($Gutter-Map, ($Breakpoint: $Gutter));\r\n  }\r\n\r\n  $Gutter-Map: sort-map($Gutter-Map, not $Mobile-First);\r\n\r\n  @return $Gutter-Map;\r\n}\r\n\r\n@mixin add-gutter($gutter-definition) {\r\n  $Add-Gutter: add-gutter($gutter-definition);\r\n  $HOLDER: sgs-set('gutters', $Add-Gutter);\r\n}","//////////////////////////////\r\n// Find gutter\r\n//\r\n// Finds the gutter that you are on.\r\n// From Singularity\r\n// Must be using Breakpoint to work properly\r\n//////////////////////////////\r\n@function find-gutter($user-gutters: null) {\r\n\r\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\r\n  // The default supplied is based on original Susy options\r\n  $Gutters: sgs-get('gutters');\r\n\r\n  $Found: find-object($Gutters, $user-gutters);\r\n\r\n  @if length($Found) == 1 {\r\n    $Found: nth($Found, 1);\r\n  }\r\n\r\n  @return $Found;\r\n}","@import \"gutter-styles/add\";\r\n@import \"gutter-styles/find\";\r\n@import \"gutter-styles/helpers\";","// Accepts a gutter-style style definition in the human-readable format. Converts it to the internal format,\r\n// appends it to a list of gutter-style styles and returns the resulting list.\r\n//\r\n// Note that this function only returns a new list, it does not modify the source list.\r\n//\r\n// add-gutter-style-style($gutter-style-style-definition, $append-to-list)\r\n// - $gutter-style-definition : <definition>  See documentation for syntax:\r\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\r\n// - $append-to-list    : [list]        A list to append to.\r\n//                                      Defaults to $gutter-styles if none is specified.\r\n@function add-gutter-style($gutter-style-definition, $custom-map: false) {\r\n  $Parsed:        parse-add($gutter-style-definition); // Parses gutter-style definition to gutter-style/breakpoint\r\n  $Gutter-Style:  nth($Parsed, 1); // E. g. `(<gutter-style>)`.\r\n  $Breakpoint:    nth($Parsed, 2); // Either `(<breakpoint>)` or false.\r\n  $Mobile-First:  sgs-get('mobile first');\r\n  $Gutter-Style-Map: ();\r\n\r\n  // Determine if a custom map or the default maps should be used.\r\n  @if $custom-map {\r\n    $Gutter-Style-Map: $custom-map;\r\n  }\r\n  @else {\r\n    @if sgs-has('gutter styles') {\r\n      $Gutter-Style-Map: sgs-get('gutter styles');\r\n    }\r\n  }\r\n  $Gutter-Style-Key-Length: length(map-keys($Gutter-Style-Map));\r\n\r\n  // Check whether the definition will be the first one in the list\r\n  // and whether it has no breakpoint specified.\r\n  @if $Breakpoint == null {\r\n    // Returns the first item of the list, e. g. `(<gutter-style>)`\r\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, (-1px: $Gutter-Style));\r\n  }\r\n  // IF the list is initiated with a list of gutter-style columns need to start off\r\n  // a comma seprated list.\r\n  @else {\r\n    @if not (map-has-key($Gutter-Style-Map, -1px)) {\r\n      $Gutter-Style-Map: map-merge($Gutter-Style-Map, map-get($Singularity-Settings, 'gutter styles'));\r\n    }\r\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, ($Breakpoint: $Gutter-Style));\r\n  }\r\n\r\n  $Gutter-Style-Map: sort-map($Gutter-Style-Map, not $Mobile-First);\r\n\r\n  @return $Gutter-Style-Map;\r\n}\r\n\r\n@mixin add-gutter-style($gutter-style-definition) {\r\n  $Add-gutter-style: add-gutter-style($gutter-style-definition);\r\n  $HOLDER: sgs-set('gutter styles', $Add-gutter-style);\r\n}","//////////////////////////////\r\n// Find gutter style\r\n//\r\n// Finds the gutter style that you are working with.\r\n// From Singularity\r\n// Must be using Breakpoint to work properly\r\n//////////////////////////////\r\n@function find-gutter-style($user-gutter-styles: null) {\r\n\r\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\r\n  // The default supplied is based on original Susy options\r\n  $Gutters-Styles: sgs-get('gutter styles');\r\n\r\n  $Found: find-object($Gutters-Styles, $user-gutter-styles);\r\n\r\n  @if length($Found) == 1 {\r\n    $Found: nth($Found, 1);\r\n  }\r\n\r\n  @return $Found;\r\n}","@function fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\r\n  @if index($user-gutter-style, 'fixed') {\r\n    // @debug 'Fixed in output style';\r\n    @return true;\r\n  }\r\n  @else if type-of($user-columns) == 'number' and not unitless($user-gutter) {\r\n    // @debug 'Equal columns with a unit based gutter';\r\n    @return true;\r\n  }\r\n  @else if type-of($user-columns) == 'list' {\r\n    @if unit(nth($user-columns, 1)) != unit($user-gutter) {\r\n      // @debug 'Columns and gutters are different units';\r\n      @return true;\r\n    }\r\n  }\r\n  @else {\r\n    @return false;\r\n  }\r\n\r\n  @return false;\r\n}\r\n\r\n@function gutter-property($user-columns, $user-gutter, $user-gutter-style) {\r\n  @if fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\r\n    @return 'padding';\r\n  }\r\n  @else {\r\n    @return 'margin';\r\n  }\r\n}","@import \"api/float\";\r\n@import \"api/isolation\";\r\n@import \"api/calc\";\r\n\r\n//////////////////////////////\r\n// Master Grid Span mixin\r\n//////////////////////////////\r\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\r\n\r\n  @if $output-style == null {\r\n    $output-style: sgs-get('output');\r\n  }\r\n\r\n  $Grid: find-grid($grid);\r\n  $Gutter: find-gutter($gutter);\r\n  $Style: find-gutter-style($gutter-style);\r\n\r\n  $Start-Row: start-row($location);\r\n  $End-Row: end-row($span, $location, $Grid);\r\n\r\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\r\n  $Split-Gutter: index($Style, 'split');\r\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\r\n\r\n  $Direction: sgs-get('direction');\r\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\r\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\r\n\r\n  $Holder: ();\r\n  @each $k, $v in $options {\r\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\r\n  }\r\n  $options: if(length($Holder) > 0, $Holder, null);\r\n\r\n  $Span-Map: (\r\n    'span': $span,\r\n    'location': $location,\r\n    'grid': $Grid,\r\n    'gutter': $Gutter,\r\n    'style': $Style,\r\n    'start row': $Start-Row,\r\n    'end row': $End-Row,\r\n    'fixed gutter': $Fixed-Gutter,\r\n    'split gutter': $Split-Gutter,\r\n    'gutter property': $Gutter-Property,\r\n    'options': $options\r\n  );\r\n\r\n  @if sgs-get('debug') != false {\r\n    -sgs-span-settings: inspect($Span-Map);\r\n  }\r\n\r\n\r\n  @if function-exists('output-#{$output-style}') {\r\n    $Left: ();\r\n    $Right: ();\r\n\r\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\r\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\r\n    }\r\n\r\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\r\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\r\n    }\r\n\r\n    $Left-Keys: map-keys($Left);\r\n    $Right-Keys: map-keys($Right);\r\n    $Exclude: ();\r\n\r\n    @each $key in $Left-Keys {\r\n      @if index($Right-Keys, $key) {\r\n        @if map-get($Right, $key) == map-get($Left, $key) {\r\n          $Exclude: append($Exclude, $key);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Always try and print the Left value\r\n    @include grid-span-build-exclude($Left, $Exclude, false);\r\n\r\n    // If Direction is Both or RTL, add the RTL attribute selector\r\n    @if $Direction == 'both' or $Direction == 'rtl' {\r\n      [dir=\"rtl\"] & {\r\n        @include grid-span-build-exclude($Right, $Exclude, true);\r\n      }\r\n    }\r\n    @else {\r\n      @include grid-span-build-exclude($Right, $Exclude, true);\r\n    }\r\n  }\r\n  @else {\r\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\r\n  }\r\n}\r\n\r\n@mixin grid-span-build($property, $value) {\r\n  @if type-of($value) != 'map' {\r\n    #{$property}: $value;\r\n  }\r\n  @else {\r\n    @each $prefix, $val in $value {\r\n      #{$property}: $val;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\r\n  @each $property, $value in $properties {\r\n    @if $exclude {\r\n      @if not index($delta, $property) {\r\n        @include grid-span-build($property, $value);\r\n      }\r\n    }\r\n    @else {\r\n      @include grid-span-build($property, $value);\r\n    }\r\n  }\r\n}","@function output-float($Span-Map) {\r\n  // Set up Left/Right maps\r\n  $Return: ();\r\n\r\n  $Span: map-get($Span-Map, 'span');\r\n  $Location: map-get($Span-Map, 'location');\r\n\r\n  $Grid: map-get($Span-Map, 'grid');\r\n  $Gutter: map-get($Span-Map, 'gutter');\r\n  $Style: map-get($Span-Map, 'style');\r\n\r\n  $Start-Row: map-get($Span-Map, 'start row');\r\n  $End-Row: map-get($Span-Map, 'end row');\r\n\r\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\r\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\r\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\r\n\r\n  $Direction: map-get($Span-Map, 'direction');\r\n  $Options: map-get($Span-Map, 'options');\r\n\r\n  @if $Start-Row {\r\n    $Location: 1;\r\n  }\r\n  @else if $End-Row {\r\n    $Location: column-count($Grid) - $Span + 1;\r\n  }\r\n\r\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\r\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\r\n  $Gutter-Span: gutter-span($Gutter, $Grid);\r\n\r\n  // Backwards Compatibility for Options\r\n  @if type-of($Options) != 'map' and $Options != null {\r\n    $Options: ('clear': unquote(nth($Options, 1)));\r\n  }\r\n\r\n  $Dir: $Direction;\r\n  $Opp: opposite-direction($Dir);\r\n\r\n  $Return: map-merge($Return, ('width': $Width));\r\n  $Return: map-merge($Return, ('clear': $Opp));\r\n\r\n  @if ($End-Row) {\r\n    $Return: map-merge($Return, ('float': $Opp));\r\n\r\n    @if $Split-Gutter and not $Fixed-Gutter {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\r\n    }\r\n    @else if not $Fixed-Gutter {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\r\n    }\r\n  }\r\n  @else {\r\n    $Return: map-merge($Return, ('float': $Dir));\r\n\r\n    @if $Split-Gutter and not $Fixed-Gutter {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\r\n    }\r\n    @else if not $Fixed-Gutter {\r\n      @if $Start-Row {\r\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\r\n      }\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\r\n    }\r\n  }\r\n  // If options are set, we merge them in!\r\n  @if ($Options) {\r\n    $Return: map-merge($Return, $Options);\r\n  }\r\n\r\n  // If CLear isn't already available, set it!\r\n  @if not map-has-key($Return, 'clear') {\r\n    $Return: map-merge($Return, ('clear': none));\r\n  }\r\n\r\n  // Left Fixed Gutters\r\n  @if $Fixed-Gutter {\r\n    @if index($Style, 'split') {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\r\n    }\r\n    @else {\r\n      @if not $End-Row {\r\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\r\n      }\r\n      @else {\r\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $Return;\r\n}\r\n\r\n//////////////////////////////\r\n// Happy Syntax for Float\r\n//\r\n// Makes working with Float easier, as it allows you to walk the grid for symmetric grids and easy applying of 'last' and 'first', as well as automatically building the verbose grid-span mixin call\r\n//////////////////////////////\r\n@mixin float-span($Span, $Location: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\r\n  $grid: find-grid($grid);\r\n  $gutter: find-gutter($gutter);\r\n  $row: false;\r\n\r\n  $Options: if($from, ('from': $from), null);\r\n\r\n  // Working around SASS treating a number like a list with one element\r\n  @if type-of($grid) == 'list' and length($grid) == 1 {\r\n    $grid: nth($grid, 1);\r\n  }\r\n\r\n  // Working with a symmetric grid\r\n  @if type-of($grid) == 'number' {\r\n    // Special treatment for non-numeric location\r\n    @if type-of($Location) != 'number' {\r\n      @if $Location == 'last' or $Location == 'omega' {\r\n        $Location: $grid - $Span + 1;\r\n      }\r\n      @else {\r\n        @if $Location == 'first' or $Location == 'alpha' {\r\n          $row: true;\r\n        }\r\n        $Location: 1;\r\n      }\r\n    }\r\n\r\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\r\n\r\n    @if $row {\r\n      clear: both;\r\n    }\r\n  }\r\n  // Working with an asymmetric grid, should have location provided\r\n  @else if type-of($grid) == 'list' and $Location != false {\r\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\r\n  }\r\n  @else {\r\n    @warn 'Asymmetric Grids need a Location value as well as a span value in order to know where on the grid you are! Please include a location value!';\r\n  }\r\n}\r\n","@function output-isolation($Span-Map) {\r\n  // Set up Left/Right maps\r\n  $Return: ();\r\n\r\n  $Span: map-get($Span-Map, 'span');\r\n  $Location: map-get($Span-Map, 'location');\r\n\r\n  $Grid: map-get($Span-Map, 'grid');\r\n  $Gutter: map-get($Span-Map, 'gutter');\r\n  $Style: map-get($Span-Map, 'style');\r\n\r\n  $Start-Row: map-get($Span-Map, 'start row');\r\n  $End-Row: map-get($Span-Map, 'end row');\r\n\r\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\r\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\r\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\r\n\r\n  $Direction: map-get($Span-Map, 'direction');\r\n  $Options: map-get($Span-Map, 'options');\r\n\r\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\r\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\r\n  $Gutter-Span: gutter-span($Gutter, $Grid);\r\n\r\n  // Backwards Compatibility for Options\r\n  @if type-of($Options) != 'map' and $Options != null {\r\n    $Options: ('clear': unquote(nth($Options, 1)));\r\n  }\r\n\r\n  $Dir: $Direction;\r\n  $Opp: opposite-direction($Dir);\r\n\r\n  $Return: map-merge($Return, ('width': $Width));\r\n\r\n  @if ($End-Row) {\r\n    $Return: map-merge($Return, ('float': $Opp));\r\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\r\n\r\n    @if $Split-Gutter and not $Fixed-Gutter {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\r\n    }\r\n    @else {\r\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\r\n    }\r\n  }\r\n  @else {\r\n    $Return: map-merge($Return, ('float': $Dir));\r\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\r\n\r\n    @if $Start-Row {\r\n      @if $Split-Gutter and not $Fixed-Gutter {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\r\n      }\r\n      @else if not $Fixed-Gutter {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\r\n      }\r\n    }\r\n    @else {\r\n      @if $Split-Gutter and not $Fixed-Gutter {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\r\n      }\r\n      @else if not $Fixed-Gutter {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\r\n      }\r\n      @else {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\r\n      }\r\n    }\r\n  }\r\n  // If options are set, we merge them in!\r\n  @if ($Options) {\r\n    $Return: map-merge($Return, $Options);\r\n  }\r\n\r\n  // If CLear isn't already available, set it!\r\n  @if not map-has-key($Return, 'clear') {\r\n    $Return: map-merge($Return, ('clear': none));\r\n  }\r\n\r\n  // Left Fixed Gutters\r\n  @if $Fixed-Gutter {\r\n    @if index($Style, 'split') {\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\r\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\r\n    }\r\n    @else {\r\n      @if not $End-Row {\r\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\r\n      }\r\n      @else {\r\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $Return;\r\n}\r\n\r\n//////////////////////////////\r\n// Happy Syntax for Isolation\r\n//\r\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\r\n//////////////////////////////\r\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\r\n  $Options: ();\r\n  @if $clear {\r\n    $Options: map-merge($Options, ('clear': unquote($clear)));\r\n  }\r\n  @if $from {\r\n    $Options: map-merge($Options, ('from': $from));\r\n  }\r\n\r\n  $Options: if(length($Options) > 0, $Options, null);\r\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\r\n}\r\n\r\n//////////////////////////////\r\n// Happy Syntax of Asymmetric Grids\r\n//\r\n// Makes working with asymmetric grids easier!\r\n//////////////////////////////\r\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\r\n\r\n  $Span: if($Span != false, $Span, 1);\r\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\r\n\r\n  $Options: ();\r\n  @if $from {\r\n    $Options: map-merge($Options, ('from': $from));\r\n  }\r\n  $Options: if(length($Options) > 0, $Options, null);\r\n\r\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\r\n}","@function output-calc($Span-Map) {\r\n  // Set up Left/Right maps\r\n  $Return: ();\r\n\r\n  $Span: map-get($Span-Map, 'span');\r\n  $Location: map-get($Span-Map, 'location');\r\n\r\n  $Grid: map-get($Span-Map, 'grid');\r\n  $Gutter: map-get($Span-Map, 'gutter');\r\n  $Style: map-get($Span-Map, 'style');\r\n\r\n  @if unitless($Gutter) {\r\n    $ERROR-MESSAGE: \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\r\n    @if feature-exists(at-error) {\r\n      @error $ERROR-MESSAGE;\r\n    }\r\n    @else {\r\n      @warn $ERROR-MESSAGE;\r\n    }\r\n    @return $Return;\r\n  }\r\n\r\n  @if type-of($Grid) == 'number' {\r\n    $ERROR-MESSAGE: \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid or use another output style.\";\r\n    @if feature-exists(at-error) {\r\n      @error $ERROR-MESSAGE;\r\n    }\r\n    @else {\r\n      @warn $ERROR-MESSAGE;\r\n    }\r\n    @return $Return;\r\n  }\r\n\r\n  $Start-Row: map-get($Span-Map, 'start row');\r\n  $End-Row: map-get($Span-Map, 'end row');\r\n\r\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\r\n\r\n  $Direction: map-get($Span-Map, 'direction');\r\n  $Options: map-get($Span-Map, 'options');\r\n\r\n  $Dir: $Direction;\r\n  $Opp: opposite-direction($Dir);\r\n\r\n  $Width: '';\r\n  $Margin: null;\r\n  $Min-Width: '(';\r\n\r\n  $Fixed: ();\r\n  $Fluid: ();\r\n  $Fixed-Totals: ('px': 0, 'em': 0, '%': 0);\r\n  $Gutter-Totals: if(str-index($Style, 'split'), $Gutter * length($Grid), $Gutter * (length($Grid) - 1));\r\n  $Fluid-Totals: 0;\r\n  $Fluid-Fixed-Sum: '';\r\n  $Single-Fluid: '';\r\n\r\n  @for $i from 1 through length($Grid) {\r\n    $Item: nth($Grid, $i);\r\n    @if not unitless($Item) {\r\n      $Fixed: map-merge($Fixed, ($i: $Item));\r\n    }\r\n    @else {\r\n      $Fluid: map-merge($Fluid, ($i: $Item));\r\n    }\r\n  }\r\n\r\n  @each $k, $v in $Fixed {\r\n    $Unit: unit($v);\r\n    $Running: map-get($Fixed-Totals, $Unit) + $v;\r\n    $Fixed-Totals: map-merge($Fixed-Totals, ($Unit: $Running));\r\n  }\r\n\r\n  @each $k, $v in $Fluid {\r\n    $Fluid-Totals: $Fluid-Totals + $v;\r\n  }\r\n\r\n  @each $k, $v in $Fixed-Totals {\r\n\r\n    @if $v != 0 {\r\n      $Fluid-Fixed-Sum: '#{$Fluid-Fixed-Sum}#{$v} + ';\r\n    }\r\n  }\r\n\r\n  // Width of a single fluid item, for calc()\r\n  $Single-Fluid: '((100% - (#{$Fluid-Fixed-Sum}#{$Gutter-Totals})) / (#{$Fluid-Totals}))';\r\n\r\n  // Margin Calculation\r\n  @if not $Start-Row or not $End-Row {\r\n    @if $Split-Gutter {\r\n      $Margin: '#{$Gutter / 2} + ';\r\n    }\r\n\r\n    @for $i from 1 to $Location {\r\n      @if unitless(nth($Grid, $i)) {\r\n        $Margin: '#{$Margin}(#{$Single-Fluid} * #{nth($Grid, $i)} + #{$Gutter}) + ';\r\n      }\r\n      @else {\r\n        $Margin: '#{$Margin}(#{nth($Grid, $i)} + #{$Gutter}) + ';\r\n      }\r\n    }\r\n  }\r\n  @if $Margin != null {\r\n    $Margin: str-slice($Margin, 0, -4);\r\n  }\r\n\r\n\r\n  // Width Calculation\r\n  @if $Span == 1 {\r\n    @if map-has-key($Fixed, $Location) {\r\n      $Return: map-merge($Return, ('width': map-get($Fixed, $Location)));\r\n    }\r\n    @else if map-has-key($Fluid, $Location) {\r\n      $Math: '(#{$Single-Fluid}) * #{nth($Grid, $Location)}';\r\n      $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Math)}), 'standard': calc(#{unquote($Math)})));\r\n      $Return: map-merge($Return, $Span-Map);\r\n    }\r\n  }\r\n  @else {\r\n    $Location-End: $Location + ($Span - 1);\r\n    $Fixed-Counter: 0;\r\n    @for $i from $Location through $Location-End {\r\n      @if unitless(nth($Grid, $i)) {\r\n        $Width: '#{$Width}(#{$Single-Fluid} * #{nth($Grid, $i)}';\r\n      }\r\n      @else {\r\n        $Fixed-Counter: $Fixed-Counter + 1;\r\n        $Min-Width: '#{$Min-Width}#{nth($Grid, $i)} + #{$Gutter} + ';\r\n        $Width: '#{$Width}(#{nth($Grid, $i)}';\r\n      }\r\n\r\n\r\n      @if $i != $Location-End {\r\n        $Width: '#{$Width} + #{$Gutter}) + ';\r\n      }\r\n      @else {\r\n        $Min-Width: str-slice($Min-Width, 0, -4);\r\n        @if $Fixed-Counter == 1 {\r\n          $Min-Width: '#{$Min-Width} - #{$Gutter}';\r\n        }\r\n        $Min-Width: '#{$Min-Width})';\r\n        $Width: '#{$Width})';\r\n      }\r\n    }\r\n\r\n    // Min width handling\r\n    @if $Min-Width != ')' {\r\n      $Min-Map: ('min-width': ('webkit' : -webkit-calc(#{unquote($Min-Width)}), 'standard': calc(#{unquote($Min-Width)}) ));\r\n\r\n      @if sgs-get('calc include min-width') {\r\n        $Return: map-merge($Return, $Min-Map);\r\n      }\r\n    }\r\n\r\n    $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Width)}), 'standard': calc(#{unquote($Width)}) ) );\r\n    $Return: map-merge($Return, $Span-Map);\r\n  }\r\n\r\n  // Build margins and Floats\r\n  @if ($End-Row) {\r\n    $Return: map-merge($Return, ('float': $Opp));\r\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\r\n\r\n    @if $Split-Gutter {\r\n      $Return: map-merge($Return, ('margin-#{$Opp}': $Gutter / 2));\r\n    }\r\n    @else {\r\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\r\n    }\r\n  }\r\n  @else {\r\n    $Return: map-merge($Return, ('float': $Dir));\r\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\r\n\r\n    @if $Start-Row {\r\n      @if $Split-Gutter {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter / 2));\r\n      }\r\n      @else {\r\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\r\n      }\r\n    }\r\n    @else {\r\n      $Margin-Map: ('margin-#{$Dir}': ('webkit': -webkit-calc(#{unquote($Margin)}), 'standard': calc(#{unquote($Margin)})));\r\n      $Return: map-merge($Return, $Margin-Map);\r\n    }\r\n  }\r\n\r\n  @return $Return;\r\n}\r\n\r\n\r\n\r\n//////////////////////////////\r\n// Happy Syntax for Calc\r\n//\r\n// Makes working with Calc easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\r\n//////////////////////////////\r\n@mixin calc-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\r\n\r\n  @if $gutter != false and unitless($gutter) {\r\n    @warn \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\r\n  }\r\n\r\n  @if $grid != false and type-of($grid) == 'number' {\r\n    @warn \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid.\";\r\n  }\r\n\r\n  $Options: ();\r\n  @if $clear {\r\n    $Options: map-merge($Options, ('clear': $clear));\r\n  }\r\n  @if $from {\r\n    $Options: map-merge($Options, ('from': $from));\r\n  }\r\n\r\n  $Options: if(length($Options) > 0, $Options, null);\r\n  @include grid-span($Span, $Location, $grid, $gutter, 'calc', $gutter-style, $Options);\r\n}\r\n","$orange: #f1a80a;\r\n$text-gray: #9b9b9b;\r\n$border-gray: #e3e3e3;\r\n$select-text: #787878;\r\n$title-blue: #0195ba;\r\n$text-color: #555555;\r\n$text-color-blue: #d8eee6;\r\n\r\n\r\n@include add-grid(12);\r\n\r\n//@include add-gutter(30px);\r\n\r\n//@include sgs-change('debug', true);\r\n//\r\n//.container {\r\n//  @include background-grid($color: blue);\r\n//}\r\n//@include add-gutter-style('split');\r\n//@include add-gutter(12/39 at $tablet-breakpoint);\r\n//@include add-gutter(15/47 at $desktop-breakpoint);",".container {\r\n\tposition: relative;\r\n\twidth: 1170px;\r\n\tbox-sizing: border-box;\r\n\tmargin: 0 auto;\r\n\tpadding: 0 15px;\r\n\t@extend %clearfix;\r\n}\r\noption {\r\n\tpadding: 10px;\r\n\toutline: 0;\r\n\tborder: 0;\r\n}\r\n.description {\r\n\twidth: 55%;\r\n\tfont-family: pf_din_medium, Arial, sans-serif;\r\n\tfont-size: 1.26rem;\r\n\tfont-weight: bold;\r\n\tline-height: 1.4;\r\n\tmargin-bottom: 30px;\r\n\tcolor: #555555;\r\n}\r\n.text {\r\n\twidth: 55%;\r\n\tfont-size: 1rem;\r\n\tfont-family: Arial, sans-serif;\r\n\tline-height: 1.3;\r\n\tcolor: #555555;\r\n\r\n}\r\n.title {\r\n\tposition: relative;\r\n\ttext-transform: uppercase;\r\n\tcolor: $title-blue;\r\n\tfont-family: pf_din_bold, Arial, sans-serif;\r\n\tfont-size: 2.15rem;\r\n\tmargin-bottom: 48px;\r\n\r\n\t&:before {\r\n\t\tcontent: '';\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\tbackground: #333;\r\n\t\topacity: 0.2;\r\n\t\tbottom: -15px;\r\n\t\tleft: 3px;\r\n\t\theight: 5px;\r\n\t\twidth: 70px;\r\n\t}\r\n}\r\n.btn {\r\n\tdisplay: block;\r\n\twidth: 290px;\r\n\theight: 67px;\r\n\tline-height: 67px;\r\n\tbackground: $orange;\r\n\tfont-size: 1.7rem;\r\n\tfont-family: pf_din_promedium, Arial, sans-serif;\r\n\tcolor: #fff;\r\n\ttext-transform: uppercase;\r\n\ttext-decoration: none;\r\n\ttext-align: center;\r\n\t@include box-shadow(0px 17px 10px -10px rgba(0,0,0,0.2));\r\n\t@include transition(all ease-in-out 300ms);\r\n\t&:focus {\r\n\t\toutline: 0;\r\n\r\n\t\t@include box-shadow(0px 37px 20px -20px rgba(0,0,0,0.2));\r\n\t\t@include transform(translate(0px, -10px) scale(1.01));\r\n\t}\r\n\t&:hover {\r\n\t\toutline: 0;\r\n\r\n\t\t@include box-shadow(0px 37px 20px -20px rgba(0,0,0,0.2));\r\n\t\t@include transform(translate(0px, -10px) scale(1.01));\r\n\t}\r\n}\r\n\r\n/* Slider */\r\n\r\n.slick-slider {\r\n\tposition: relative;\r\n\tdisplay: block;\r\n\tbox-sizing: border-box;\r\n\t-webkit-touch-callout: none;\r\n\t-webkit-user-select: none;\r\n\t-khtml-user-select: none;\r\n\t-moz-user-select: none;\r\n\t-ms-user-select: none;\r\n\tuser-select: none;\r\n\t-ms-touch-action: pan-y;\r\n\ttouch-action: pan-y;\r\n\t-webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.slick-list {\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tdisplay: block;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t}\r\n\r\n\t&.dragging {\r\n\t\tcursor: pointer;\r\n\t\tcursor: hand;\r\n\t}\r\n}\r\n\r\n.slick-slider .slick-track,\r\n.slick-slider .slick-list {\r\n\t-webkit-transform: translate3d(0, 0, 0);\r\n\t-moz-transform: translate3d(0, 0, 0);\r\n\t-ms-transform: translate3d(0, 0, 0);\r\n\t-o-transform: translate3d(0, 0, 0);\r\n\ttransform: translate3d(0, 0, 0);\r\n}\r\n\r\n.slick-track {\r\n\tposition: relative;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tdisplay: block;\r\n\t&:focus {\r\n\t\toutline: 0;\r\n\t}\r\n\t&:hover {\r\n\t\toutline: 0;\r\n\t}\r\n\t&:before,\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t}\r\n\r\n\t&:after {\r\n\t\tclear: both;\r\n\t}\r\n\r\n\t.slick-loading & {\r\n\t\tvisibility: hidden;\r\n\t}\r\n}\r\n\r\n.slick-slide {\r\n\tfloat: left;\r\n\theight: 100%;\r\n\tmin-height: 1px;\r\n\t[dir=\"rtl\"] & {\r\n\t\tfloat: right;\r\n\t}\r\n\timg {\r\n\t\tdisplay: block;\r\n\t}\r\n\t&.slick-loading img {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\tdisplay: none;\r\n\r\n\t&.dragging img {\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.slick-initialized & {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.slick-loading & {\r\n\t\tvisibility: hidden;\r\n\t}\r\n\r\n\t.slick-vertical & {\r\n\t\tdisplay: block;\r\n\t\theight: auto;\r\n\t\tborder: 1px solid transparent;\r\n\t}\r\n}\r\n\r\n.slick-arrow.slick-hidden {\r\n\tdisplay: none;\r\n}\r\n.slick-arrow{\r\n\tcursor: pointer;\r\n\tdisplay: block;\r\n\tborder: 0;\r\n\toutline: 0;\r\n\tposition: absolute;\r\n\tbackground: $orange;\r\n\twidth: 64px;\r\n\theight: 64px;\r\n\tline-height: 64px;\r\n\tcolor: #fff;\r\n\tfont-size: 2rem;\r\n\ttext-align: center;\r\n\ttop: 63%;\r\n\tz-index: 100;\r\n\t@include transform(translateY(-50%));\r\n\t@include box-shadow(0px 17px 10px -10px rgba(0,0,0,0.2));\r\n\t@include transition(all ease-in-out 300ms);\r\n\r\n\t&:focus {\r\n\t\toutline: 0;\r\n\r\n\t\t@include box-shadow(0px 12px 7px -12px rgba(0, 0, 0, 0.39));\r\n\t}\r\n\t&:hover {\r\n\t\toutline: 0;\r\n\r\n\t\t@include box-shadow(0px 37px 20px -20px rgba(0,0,0,0.2));\r\n\t\t@include transform(translate(0px, -35px) scale(1.01));\r\n\r\n\t}\r\n}\r\n.slick-prev{\r\n\tbackground: $orange url(../img/icon/arrow-prev.png) no-repeat 24px center;\r\n\tleft: 3px;\r\n}\r\n.slick-next {\r\n\tbackground: $orange url('../img/icon/arrow-next.png') no-repeat center;\r\n\tright: 0;\r\n}\r\n.slider__title {\r\n\tposition: absolute;\r\n\tleft: 0px;\r\n\tfont-family: Arial, sans-serif;\r\n\tfont-size: 2.3rem;\r\n\tcolor: #0195ba;\r\n\ttext-transform: uppercase;\r\n\tfont-weight: bold;\r\n\ttop: -3px;\r\n}\r\n\r\n.social {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tflex-flow: row wrap;\r\n\r\n\t&__list {\r\n\t\tlist-style: none;\r\n\t\tmargin-left: 180px;\r\n\r\n\t}\r\n\t&__item {\r\n\t\tdisplay: inline-block;\r\n\t\tmargin-left: 14px;\r\n\t\t&:first-child {\r\n\t\t\tmargin-left: 0;\r\n\t\t}\r\n\t\ta {\r\n\t\t\tdisplay: block;\r\n\t\t\theight: 25px;\r\n\t\t\ttext-decoration: none;\r\n\t\t}\r\n\t}\r\n\t&__list_lin {\r\n\r\n\t\ta {\r\n\t\t\twidth: 28px;\r\n\t\t\tbackground: url('/img/icon/linkedin-black.png') no-repeat center;\r\n\t\t}\r\n\r\n\t}\r\n\t&__list_twi {\r\n\t\ta {\r\n\t\t\twidth: 30px;\r\n\t\t\tbackground: url('/img/icon/twitter-black.png') no-repeat center;\r\n\t\t}\r\n\r\n\r\n\t}\r\n\t&__list_fac {\r\n\t\ta {\r\n\t\t\twidth: 25px;\r\n\t\t\tbackground: url('/img/icon/facebook-black.png') no-repeat center;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n//.transbg {\r\n//\tbackground-color: rgba(0, 0, 0, 0.5) !important;\r\n//}\r\n.fixed {\r\n\twidth: 100%;\r\n\tposition: fixed;\r\n\tbackground: #fff;\r\n\tpadding: 15px 0;\r\n\ttop: 0;\r\n\tz-index: 1000;\r\n}\r\n\r\n.hide {\r\n\tdisplay: none;\r\n}\r\n.show {\r\n\tdisplay: block;\r\n}\r\n\r\n.choose {\r\n\tbackground: #f7f7f7;\r\n\theight: 63px;\r\n\tline-height: 63px;\r\n\tpadding: 0 18px;\r\n\tmargin-bottom: 43px;\r\n\r\n\t&__label {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 1.01rem;\r\n\t\ttext-transform: uppercase;\r\n\t\tcolor: #555;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\t&__spec {\r\n\t\tdisplay: inline-block;\r\n\t\tposition: relative;\r\n\t}\r\n\t&__clinic {\r\n\t\tdisplay: inline-block;\r\n\t\tposition: relative;\r\n\t\tmargin-left: 36px;\r\n\t}\r\n\r\n\t&__country {\r\n\t\tdisplay: inline-block;\r\n\t\tposition: relative;\r\n\t\tmargin-left: 36px;\r\n\r\n\t\t.choose__select {\r\n\t\t\tmargin-left: 23px;\r\n\t\t}\r\n\t}\r\n\t&__select {\r\n\t\tdisplay: inline-block;\r\n\t\tposition: relative;\r\n\t\tmargin-left: 14px;\r\n\r\n\t\t&:after {\r\n\t\t\tcontent: '';\r\n\t\t\tposition: absolute;\r\n\t\t\tdisplay: block;\r\n\t\t\twidth: 9px;\r\n\t\t\theight: 6px;\r\n\t\t\tbackground: url('../img/icon/chevron-down.png') no-repeat center;\r\n\t\t\tright: 8px;\r\n\t\t\ttop: 50%;\r\n\t\t\t@include transform(translateY(-50%));\r\n\t\t}\r\n\t}\r\n\tselect {\r\n\t\tposition: relative;\r\n\t\twidth: 230px;\r\n\t\theight: 33px;\r\n\t\tbackground: inherit;\r\n\t\tborder: #e3e3e3 1px solid;\r\n\t\tpadding: 5px;\r\n\t\tcolor: #787878;\r\n\t\toutline: 0;\r\n\t\t-webkit-appearance: none;\r\n\t\t-moz-appearance: none;\r\n\t\tappearance: none;\r\n\t\tpadding: 5px 5px 5px 14px;\r\n\t\tfont-size: 1rem;\r\n\t\tmargin-bottom: 13px;\r\n\r\n\t\t&:focus {\r\n\t\t\toutline: 0;\r\n\t\t}\r\n\t\t&:active {\r\n\t\t\toutline: 0;\r\n\t\t}\r\n\t}\r\n}\r\n.video {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\tmargin-top: 10px;\r\n\r\n\t.preview_img {\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t}\r\n\t.play {\r\n\t\tposition:absolute;\r\n\t\twidth: 90px;\r\n\t\theight: 90px;\r\n\t\tleft:0;\r\n\t\tright:0;\r\n\t\ttop:0;\r\n\t\tbottom:0;\r\n\t\tmargin:auto;\r\n\t\tcursor:pointer;\r\n\t\t@include transition(all 0.2s ease-out);\r\n\r\n\t\t&:hover{\r\n\t\t\t& .introduction__preview {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t\t& .video__vimeohttps {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.counrty {\r\n\t@extend %clearfix;\r\n\tmargin-bottom: 41px;\r\n\r\n\t&:last-child {\r\n\t\tmargin-bottom: 0;\r\n\t}\r\n\r\n\th3 {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 1.14rem;\r\n\t\tcolor: $title-blue;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t&__clinic_name {\r\n\t\tdisplay: block;\r\n\t\tmargin-bottom: 41px;\r\n\t\tposition: relative;\r\n\t\t&:last-child {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tfont-weight: bold;\r\n\t\t}\r\n\t}\r\n\r\n\t&__clinic {\r\n\t\timg {\r\n\t\t\twidth: 123px;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: -5px;\r\n\t\t\tright: 0;\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\r\n\t\tspan {\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t//font-weight: bold;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\t//margin-bottom: 10px;\r\n\t\t\tcolor: #555555;\r\n\t\t}\r\n\t\tem {\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tcolor: #555555;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n}",".header {\r\n\tmargin-bottom: 94px;\r\n\r\n\t&__wrap {\r\n\t\twidth: 100%;\r\n\t\tdisplay: flex;\r\n\t\tmargin-right: auto;\r\n\t\tmargin-left: auto;\r\n\t\tflex-flow: row wrap;\r\n\t\talign-items: center;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t&__logo {\r\n\t\tdisplay: block;\r\n\t\ttext-decoration: none;\r\n\t\twidth: 245px;\r\n\t\t//flex: 1 1 245px;\r\n\t\tposition: relative;\r\n\t\t//left: -20px;\r\n\t\timg {\r\n\t\t\tdisplay: block;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\t&__nav {\r\n\t\tdisplay: block;\r\n\t\tmargin-left: 11px;\r\n\t\tpadding-bottom: 14px;\r\n\r\n\t}\r\n\t.nav {\r\n\t\t&__list {\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t\t&__item {\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-left: 30px;\r\n\t\t\tposition: relative;\r\n\t\t\t@include transition(all ease-in-out 300ms);\r\n\r\n\t\t\t//@include breakpoint($tablet-breakpoint) {\r\n\t\t\t//\tmargin-left: 20px;\r\n\t\t\t//}\r\n\r\n\t\t\t&:hover {\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\twidth: 30px;\r\n\t\t\t\t\theight: 5px;\r\n\t\t\t\t\tbottom: -16px;\r\n\t\t\t\t\tleft: 1px;\r\n\t\t\t\t\tbackground: $orange;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t&:first-child{\r\n\t\t\t\tmargin-left: 0;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t\ttext-transform: uppercase;\r\n\t\t\t\tcolor: $text-gray;\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tfont-size: 15px;\r\n\r\n\t\t\t\t&:focus {\r\n\t\t\t\t\toutline:0;\r\n\t\t\t\t}\r\n\t\t\t\t&:active {\r\n\t\t\t\t\toutline: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t&__item.active {\r\n\t\t\t&:after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 30px;\r\n\t\t\t\theight: 5px;\r\n\t\t\t\tbottom: -16px;\r\n\t\t\t\tleft: 1px;\r\n\t\t\t\tbackground: $orange;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__auth {\r\n\t\t//flex: 1 1 205px;\r\n\t\tpadding-bottom: 14px;\r\n\t\t&_login {\r\n\t\t\tposition: relative;\r\n\r\n\t\t\t&:after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 1px;\r\n\t\t\t\theight: 13px;\r\n\t\t\t\tbackground: $orange;\r\n\t\t\t\ttop: 3px;\r\n\t\t\t\tright: -5px;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t&__link {\r\n\t\ttext-decoration: none;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 15px;\r\n\t\tfont-weight: bold;\r\n\t\tletter-spacing: 0.5px;\r\n\t\tcolor: $orange;\r\n\t\tmargin-left: 10px;\r\n\t\t&:first-child{\r\n\t\t\tmargin-left: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t&__language {\r\n\t\t//flex: 1 1 100px;\r\n\t\tposition: relative;\r\n\t\t//margin-right: 11px;\r\n\t\t&:after {\r\n\t\t\tcontent: '';\r\n\t\t\tposition: absolute;\r\n\t\t\tdisplay: block;\r\n\t\t\twidth: 9px;\r\n\t\t\theight: 5px;\r\n\t\t\tbackground: url('../img/icon/chevron-down.png') no-repeat center;\r\n\t\t\tright: 8px;\r\n\t\t\ttop: 17px;\r\n\t\t}\r\n\t\t&_select{\r\n\t\t\tposition: relative;\r\n\t\t\twidth: 100px;\r\n\t\t\theight: 35px;\r\n\t\t\tborder: $border-gray 1px solid;\r\n\t\t\tpadding: 5px;\r\n\t\t\tcolor: $select-text;\r\n\t\t\toutline: 0;\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\t-moz-appearance: none;\r\n\t\t\tappearance: none;\r\n\t\t\tpadding: 5px 5px 5px 10px;\r\n\t\t\tmargin-bottom: 13px;\r\n\r\n\t\t\t&:focus {\r\n\t\t\t\toutline: 0;\r\n\t\t\t}\r\n\t\t\t&:active {\r\n\t\t\t\toutline: 0;\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\t}\r\n}\r\n\r\n",".introduction {\r\n\t@extend %clearfix;\r\n\tpadding-bottom: 103px;\r\n\tbackground: url(../img/icon/bg-icon_1.png) no-repeat -110px 107px;\r\n\t&__left {\r\n\t\t@include grid-span(7, 1);\r\n\t}\r\n\t&__right {\r\n\t\t@include grid-span(5, 8);\r\n\t\twidth: 42.66667%;\r\n\t}\r\n\r\n\t&__title {\r\n\t\tposition: relative;\r\n\t\ttext-transform: uppercase;\r\n\t\tcolor: $title-blue;\r\n\t\tfont-family: pf_din_bold, Arial, sans-serif;\r\n\t\tfont-size: 45px;\r\n\t\tmargin-bottom: 65px;\r\n\r\n\t\t&:before {\r\n\t\t\tcontent: '';\r\n\t\t\tdisplay: block;\r\n\t\t\tposition: absolute;\r\n\t\t\tbackground: #333;\r\n\t\t\topacity: 0.2;\r\n\t\t\tbottom: -36px;\r\n\t\t\tleft: 2px;\r\n\t\t\theight: 5px;\r\n\t\t\twidth: 70px;\r\n\t\t}\r\n\t}\r\n\t&__text {\r\n\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\tfont-size: 24px;\r\n\t\tcolor: $text-color;\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 40px;\r\n\t\tline-height: 1.24;\r\n\t}\r\n}\r\n",".advantages {\r\n\t@extend %clearfix;\r\n\tbackground-image: -moz-linear-gradient( 111deg, rgb(0,120,159) 0%, rgb(2,133,168) 32%, rgb(3,146,177) 100%);\r\n\tbackground-image: -webkit-linear-gradient( 111deg, rgb(0,120,159) 0%, rgb(2,133,168) 32%, rgb(3,146,177) 100%);\r\n\tbackground-image: -ms-linear-gradient( 111deg, rgb(0,120,159) 0%, rgb(2,133,168) 32%, rgb(3,146,177) 100%);\r\n\tpadding: 63px 0 73px;\r\n\r\n\t&__title {\r\n\t\ttext-align: center;\r\n\t\tcolor: #fff;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 32px;\r\n\t\tmargin-bottom: 41px;\r\n\t\ttext-transform: uppercase;\r\n\t}\r\n\r\n\t&__list {\r\n\t\t@extend %clearfix;\r\n\t\t//display: flex;\r\n\t\t//margin-right: auto;\r\n\t\t//margin-left: auto;\r\n\t\t//flex-flow: row wrap;\r\n\t\t//align-items: inherit;\r\n\t\t//justify-content: space-between;\r\n\t}\r\n\t&__item {\r\n\t\t//width: 260px;\r\n\t\t//margin-left: 80px;\r\n\t\t//width: 225px;\r\n\r\n\t\ttext-align: center;\r\n\t\t//margin-left: 30px;\r\n\r\n\t\t&:nth-child(1) {\r\n\t\t\t@include grid-span(3,1);\r\n\t\t\twidth: 230px;\r\n\t\t\t//.advantages__item_icon {\r\n\t\t\t//\tmargin-left: 30px;\r\n\t\t\t//}\r\n\t\t}\r\n\t\t&:nth-child(2) {\r\n\t\t\t@include grid-span(3,4);\r\n\t\t\twidth: 262px;\r\n\t\t\t//.advantages__item_icon {\r\n\t\t\t//\tmargin-left: 47px;\t\r\n\t\t\t//}\r\n\t\t}\r\n\t\t&:nth-child(3) {\r\n\t\t\t@include grid-span(3,7);\r\n\t\t\twidth: 290px;\r\n\t\t\t//.advantages__item_icon {\r\n\t\t\t//\tmargin-left: 61px;\r\n\t\t\t//}\r\n\t\t}\r\n\t\t&:nth-child(4) {\r\n\t\t\t@include grid-span(3,10);\r\n\t\t\twidth: 225px;\r\n\t\t\t//.advantages__item_icon {\r\n\t\t\t//\tmargin-left: 30px;\r\n\t\t\t//}\r\n\t\t}\r\n\t\t//@include breakpoint($tablet-breakpoint) {\r\n\t\t//\twidth: 210px;\r\n\t\t//}\r\n\t\t//@include breakpoint($desktop-breakpoint) {\r\n\t\t//\twidth: 300px;\r\n\t\t//}\r\n\t\t//&:first-child {\r\n\t\t//\tmargin-left: 0;\r\n\t\t//}\r\n\t\t&_icon {\r\n\t\t\tbackground: url('../img/icon/advantages-sprite.png') no-repeat center;\r\n\t\t\tdisplay: block;\r\n\t\t\twidth: 165px;\r\n\t\t\theight: 139px;\r\n\t\t\tmargin: 0 auto 37px;\r\n\t\t}\r\n\t\t&_title {\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 20px;\r\n\t\t\tmargin-bottom: 11px;\r\n\t\t\tcolor: #fff;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t}\r\n\t\t&_text {\r\n\t\t\tcolor: $text-color-blue;\r\n\t\t\tfont-size: 18px;\r\n\t\t\tfont-family: pf_din_regular, Arial, sans-serif;\r\n\t\t\tline-height: 1.24;\r\n\t\t}\r\n\t}\r\n\t&__icon_one {\r\n\t\tbackground-position: -35px -35px;\r\n\t}\r\n\t&__icon_two {\r\n\t\tbackground-position: -270px -35px;\r\n\t}\r\n\t&__icon_three {\r\n\t\tbackground-position: -505px -35px;\r\n\t}\r\n\t&__icon_for {\r\n\t\tbackground-position: -740px -35px;\r\n\t}\r\n}\r\n\r\n\r\n\r\n",".how_it_works {\r\n\t@extend %clearfix;\r\n\tpadding: 63px 0;\r\n\ttext-align: center;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tbackground: url('/img/icon/bg-icon_3.png') no-repeat -230px center;\r\n\r\n\t&:before {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\tdisplay: block;\r\n\t\tbackground: url('/img/icon/bg-icon_2.png') no-repeat center;\r\n\t\twidth: 782px;\r\n\t\theight: 917px;\r\n\t\tright: -260px;\r\n\t\ttop: -520px;\r\n\t}\r\n\r\n\r\n\t&__left {\r\n\t\t@include grid-span(4, 2);\r\n\t\ttext-align: left;\r\n\t\twidth: 37.20339%;\r\n\t\tmargin-left: 8.77458%;\r\n\t\tposition: relative;\r\n\r\n\t\tli {\r\n\t\t\tpadding-left: 51px;\r\n\t\t\t&:before {\r\n\t\t\t\tleft: 0;\r\n\t\t\t\ttop: -5px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.how_it_works__list {\r\n\t\t\tposition: relative;\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tbackground: url(../img/icon/arrow_left.png) no-repeat center;\r\n\t\t\t\twidth: 100px;\r\n\t\t\t\theight: 60px;\r\n\t\t\t\tright: -98px;\r\n\t\t\t\ttop: -87px;\r\n\t\t\t}\r\n\t\t\t&:after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tbackground: url(../img/icon/arrow_right.png) no-repeat center;\r\n\t\t\t\twidth: 100px;\r\n\t\t\t\theight: 60px;\r\n\t\t\t\tright: -98px;\r\n\t\t\t\tbottom: -69px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__right {\r\n\t\t@include grid-span(5, 7);\r\n\t\ttext-align: left;\r\n\t\tmargin-left: 51.34746%;\r\n\t\tposition: relative;\r\n\t\t//margin-bottom: 13px;\r\n\t\t.how_it_works__img {\r\n\t\t\tfloat: right;\r\n\t\t}\r\n\t\tli {\r\n\t\t\tpadding-left: 51px;\r\n\t\t\t&:before {\r\n\t\t\t\tleft: 0;\r\n\t\t\t\ttop: -5px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__btn {\r\n\t\tclear: both;\r\n\t}\r\n\r\n\t&__title {\r\n\t\tfont-size: 32px;\r\n\t\tcolor: $orange;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-weight: bold;\r\n\t\tletter-spacing: 0.7px;\r\n\t\tmargin-bottom: 16px;\r\n\t\ttext-transform: uppercase;\r\n\t}\r\n\t&__description {\r\n\t\tfont-size: 22px;\r\n\t\tletter-spacing: 0.3px;\r\n\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\tcolor: #6c6c6c;\r\n\t\tline-height: 1.2;\r\n\t\tmargin-bottom: 58px;\r\n\t}\r\n\t&__img {\r\n\t\tdisplay: inline-block;\r\n\t\twidth: 390px;\r\n\t\tfont-size:0;\r\n\t\tmargin-bottom: 116px;\r\n\r\n\t\t&:last-child {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\r\n\t\timg {\r\n\t\t\tdisplay: block;\r\n\t\t\tmax-width: 100%;\r\n\t\t\theight:100%;\r\n\t\t}\r\n\t}\r\n\t&__list {\r\n\t\tmin-height: 304px;\r\n\t\tposition: relative;\r\n\t\tmargin-bottom: 100px;\r\n\t\t\r\n\t\th3 {\r\n\t\t\tfont-size: 24px;\r\n\t\t\tcolor: $orange;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tmargin-bottom: 14px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t}\r\n\t\tp {\r\n\t\t\tfont-size: 20px;\r\n\t\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\t\tcolor: #6c6c6c;\r\n\t\t\tline-height: 1.2;\r\n\t\t\tmargin-bottom: 28px;\r\n\t\t}\r\n\t\tul {\r\n\t\t\tlist-style: none;\r\n\t\t\t//min-height: 304px;\r\n\t\t\tmargin-bottom: 72px;\r\n\t\t}\r\n\t\tli {\r\n\t\t\tposition: relative;\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-size: 20px;\r\n\t\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\t\tcolor: #6c6c6c;\r\n\t\t\tline-height: 1.2;\r\n\t\t\tmargin-bottom: 26px;\r\n\t\t\t&:last-child {\r\n\t\t\t\tmargin-bottom: 0;\r\n\t\t\t}\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tbackground: url('../img/icon/checkmark-circle.png') no-repeat center;\r\n\t\t\t\twidth: 32px;\r\n\t\t\t\theight: 32px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__btn {\r\n\t\tmargin: 0 auto;\r\n\t}\r\n}",".clinic-block {\r\n\t@extend %clearfix;\r\n\tpadding: 45px 0 78px;\r\n\tposition: relative;\r\n\t//text-align: center;\r\n\r\n\t&__title {\r\n\t\tposition: absolute;\r\n\t\ttop: -5px;\r\n\t\tleft: 15px;\r\n\t\tletter-spacing: 0.8px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 32px;\r\n\t\tcolor: #0195ba;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t&__slider {\r\n\t\t@extend %clearfix;\r\n\t\t//padding-top: 40px;\r\n\t}\r\n\r\n\t.slider-cli {\r\n\r\n\t\t&__list {\r\n\t\t\t@extend %clearfix;\r\n\t\t\tposition: relative;\r\n\t\t}\r\n\t\t&__items {\r\n\t\t\tposition: relative;\r\n\t\t\ttext-align: center;\r\n\t\t\t@extend %clearfix;\r\n\t\t\t&:focus {\r\n\t\t\t\tborder: 0;\r\n\t\t\t\toutline: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&__item {\r\n\t\t\t@extend %clearfix;\r\n\t\t\tposition: relative;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tbox-sizing: border-box;\r\n\t\t\t//width: 49%;\r\n\t\t}\r\n\r\n\t\t&__item_big {\r\n\t\t\t//width: 51%;\r\n\t\t\t//margin-left: 10px;\r\n\t\t\t@include grid-span(5, 2);\r\n\t\t\t& .slider-cli__item_img {\r\n\t\t\t\twidth: 455px;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t& .slider-cli__item_title {\r\n\t\t\t\t//width: 320px;\r\n\t\t\t\tfloat: right;\r\n\t\t\t}\r\n\t\t\t& .slider-cli__item_text-vertical {\r\n\t\t\t\tright: -109px;\r\n\t\t\t\tbottom: 41px;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t&__item_small {\r\n\t\t\t@include grid-span(4, 8);\r\n\t\t\tmargin-left: 56.92203%;\r\n\t\t\t\r\n\t\t\t& .slider-cli__item_text-vertical {\r\n\t\t\t\tright: -68px;\r\n\t\t\t\tbottom: 34px;\r\n\t\t\t}\r\n\t\t\t& .slider-cli__item_img {\r\n\t\t\t\twidth: 291px;\r\n\t\t\t}\r\n\t\t\t& .slider-cli__item_title {\r\n\t\t\t\tfloat: left;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t&__item_title {\r\n\t\t\ttext-align: left;\r\n\t\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\t\tfont-size: 18px;\r\n\t\t\tcolor: #9b9b9b;\r\n\t\t\tmargin-bottom: 42px;\r\n\t\t}\r\n\t\t&__item_img {\r\n\t\t\tdisplay: inline-block;\r\n\t\t}\r\n\t\t&__item_text-vertical {\r\n\t\t\tposition: absolute;\r\n\t\t\ttext-align: left;\r\n\t\t\tletter-spacing: 0.8px;\r\n\t\t\tline-height: 1.24;\r\n\t\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\t\tfont-size: 24px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tline-height:1;\r\n\t\t\t@include transform(rotate(270deg));\r\n\t\t\t\r\n\t\t\tspan {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding-bottom: 7px;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t.slick-arrow {\r\n\t\ttop: 64%;\r\n\t}\r\n}\r\n",".doctors {\r\n\t@extend %clearfix;\r\n\tpadding: 129px 0 80px;\r\n\tposition: relative;\r\n\tbackground: #f9f9f9;\r\n\r\n\t&__title {\r\n\t\tposition: absolute;\r\n\t\ttop: -66px;\r\n\t\tleft: 15px;\r\n\t\tletter-spacing: 0.8px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 32px;\r\n\t\tcolor: #0195ba;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t&__slider {\r\n\t\t@extend %clearfix;\r\n\t}\r\n\t& .slider-doc {\r\n\r\n\t\t&__item {\r\n\t\t\ttext-align: center;\r\n\r\n\t\t\t&:nth-child(1) {\r\n\t\t\t\t@include grid-span(3, 2);\r\n\t\t\t\t//width: 262px;\r\n\r\n\t\t\t}\r\n\t\t\t&:nth-child(2) {\r\n\t\t\t\t@include grid-span(4, 5);\r\n\t\t\t\ttext-align: center;\r\n\t\t\t\t//width: 262px;\r\n\r\n\t\t\t}\r\n\t\t\t&:nth-child(3) {\r\n\t\t\t\t@include grid-span(3, 9);\r\n\t\t\t\t//width: 262px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&__item_img {\r\n\t\t\twidth: 260px;\r\n\t\t\tmargin: 0 auto;\r\n\r\n\t\t\timg {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tborder: 1px solid #e3e3e3;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t&__item_name {\r\n\t\t\ttext-align: left;\r\n\t\t\tfont-size: 22px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tcolor: $text-gray;\r\n\t\t\tfont-family: pf_din_bold, Arial, sans-serif;\r\n\t\t\t//font-weight: bold;\r\n\t\t\tletter-spacing: 0.4px;\r\n\t\t\tmargin: 28px 0 0px;\r\n\t\t}\r\n\t\t&__item_post {\r\n\t\t\ttext-align: left;\r\n\t\t\tfont-size: 20px;\r\n\t\t\tcolor: #555555;\r\n\t\t\tfont-family: pf_din_regular, Arial, sans-serif;\r\n\r\n\t\t}\r\n\t}\r\n\t.slick-arrow {\r\n\t\ttop: 36%;\r\n\t}\r\n}",".reviews {\r\n\t@extend %clearfix;\r\n\tpadding: 60px 0 90px;\r\n\tposition: relative;\r\n\t&__title {\r\n\t\tposition: absolute;\r\n\t\ttop: -62px;\r\n\t\tleft: 15px;\r\n\t\tletter-spacing: 0.8px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 32px;\r\n\t\tcolor: #0195ba;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t&__slider {\r\n\t\tmargin-top: 66px;\r\n\t}\r\n\t.slider-rev {\r\n\t\t&__list {\r\n\t\t\t@extend %clearfix;\r\n\t\t}\r\n\t\t&__items {\r\n\t\t\t&:focus {\r\n\t\t\t\tborder: 0;\r\n\t\t\t\toutline: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&__item {\r\n\t\t\t&:nth-child(1) {\r\n\t\t\t\t@include grid-span(5, 2);\r\n\t\t\t\tmargin-left: 8.74286%;\r\n\t\t\t\twidth: 37.67797%;\r\n\t\t\t}\r\n\t\t\t&:nth-child(2) {\r\n\t\t\t\t@include grid-span(5, 7);\r\n\t\t\t\twidth: 37.67797%;\r\n\t\t\t\tmargin-left: 54%;\r\n\t\t\t}\r\n\r\n\t\t\th3 {\r\n\t\t\t\tcolor: $text-gray;\r\n\t\t\t\tfont-family: pf_din_bold, Arial, sans-serif;\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tfont-size: 24px;\r\n\t\t\t\tmargin-bottom: 9px;\r\n\t\t\t}\r\n\t\t\tp {\r\n\t\t\t\tcolor: #555555;\r\n\t\t\t\tfont-size: 18px;\r\n\t\t\t\tfont-family: pf_din_regular, Arial, sans-serif;\r\n\t\t\t\t//margin-bottom: 15px;\r\n\t\t\t\tline-height: 1.2;\r\n\t\t\t\tmargin-bottom: 27px;\r\n\t\t\t\t&:last-child {\r\n\t\t\t\t\tmargin-bottom: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tspan {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tcolor: #555555;\r\n\t\t\t\tfont-size: 18px;\r\n\t\t\t\tfont-family: pf_din_light, Arial, sans-serif;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.slick-arrow {\r\n\t\ttop: 44%;\r\n\t}\r\n}",".banner {\r\n\t//background: #91cad4;\r\n\tmin-height: 250px;\r\n\ttext-align: center;\r\n\tpadding-bottom: 37px;\r\n\r\n\t&__item {\r\n\t\tbackground: #b8b8b8;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 24px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\t\r\n\t\t&:nth-child(1) {\r\n\t\t\t@include grid-span(3,1);\r\n\t\t\twidth: 250px;\r\n\r\n\t\t}\r\n\t\t&:nth-child(2) {\r\n\t\t\t@include grid-span(3,4);\r\n\t\t\twidth: 250px;\r\n\t\t\tmargin-left: 26.42373%;\r\n\t\t}\r\n\t\t&:nth-child(3) {\r\n\t\t\t@include grid-span(3,7);\r\n\t\t\twidth: 250px;\r\n\t\t\tmargin-left: 52.14746%;\r\n\t\t}\r\n\t\t&:nth-child(4) {\r\n\t\t\t@include grid-span(3,10);\r\n\t\t\twidth: 250px;\r\n\r\n\t\t}\r\n\r\n\t\theight: 250px;\r\n\t}\r\n\t\r\n\t\r\n\t&__title {\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 3.1rem;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tcolor: #499eb7;\r\n\t}\r\n}",".footer {\r\n\tdisplay: flex;\r\n\tmin-height: 125px;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n\t@extend %clearfix;\r\n\t\r\n\t&__nav {\r\n\t\t@include grid-span(5, 5);\r\n\t\tmargin-left: 38.49831%;\r\n\t\tpadding-top: 12px;\r\n\t}\r\n\t.nav {\r\n\t\t&__item {\r\n\t\t\tposition: relative;\r\n\t\t\tdisplay: inline-block;\r\n\r\n\t\t\tmargin-left: 32px;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ta {\r\n\t\t\t\tfont-size: 15px;\r\n\t\t\t\tcolor: #a1a1a1;\r\n\t\t\t\ttext-transform: uppercase;\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t}\r\n\t\t\t&:first-child {\r\n\t\t\t\tmargin-left: 0;\r\n\t\t\t}\r\n\r\n\t\t\t&:hover {\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\twidth: 30px;\r\n\t\t\t\t\theight: 5px;\r\n\t\t\t\t\tbottom: -16px;\r\n\t\t\t\t\tleft: 1px;\r\n\t\t\t\t\tbackground: $orange;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__copyright {\r\n\t\t@include grid-span(3, 1);\r\n\t\tmin-width: 400px;\r\n\t\tcolor: #a1a1a1;\r\n\t\tfont-family: pf_din_regular, Arial, sans-serif;\r\n\t\tfont-size: 20px;\r\n\t\tpadding-top: 9px;\r\n\t\t//margin-left: 10px;\r\n\t}\r\n\t&__social {\r\n\t\t@include grid-span(2, 11);\r\n\t\tmin-width: 300px;\r\n\t\tpadding-top: 6px;\r\n\t}\r\n}",".form {\r\n\tfont-size: 0;\r\n\r\n\t&__input {\r\n\t\twidth: 550px;\r\n\t\theight: 51px;\r\n\t\tborder: 1px solid #555555;\r\n\t\tbackground: inherit;\r\n\t\tpadding: 0 15px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tcolor: #555555;\r\n\t\tfont-size: 1.15rem;\r\n\t}\r\n\t&__text {\r\n\t\tresize: none;\r\n\t\theight: 107px;\r\n\t}\r\n\t&__button {\r\n\t\tcursor: pointer;\r\n\t\twidth: 208px;\r\n\t\theight: 67px;\r\n\t\tborder: 0;\r\n\t\toutline: 0;\r\n\t}\r\n\t&__link {\r\n\t\tcursor: pointer;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 1.2rem;\r\n\t\tfont-weight: bold;\r\n\t\tborder-bottom: 1px dashed;\r\n\t\tcolor: $orange;\r\n\t\tmargin-left: 40px;\r\n\t\t@include transition(all ease-in-out 400ms);\r\n\t\t&:hover {\r\n\t\t\tborder-bottom: 0;\r\n\t\t}\r\n\t}\r\n\t.content-row {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\tmargin-bottom: 37px;\r\n\r\n\t\t&__label {\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tcolor: #555555;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tmargin-bottom: 9px;\r\n\t\t}\r\n\t\t&__btn {\r\n\t\t\tmargin-top: 50px;\r\n\t\t}\r\n\t\t&__info {\r\n\t\t\tdisplay: inline-block;\r\n\t\t}\r\n\t}\r\n}",".popup {\r\n\r\n\tposition: absolute;\r\n\tmin-width: 200px;\r\n\tmin-height: 200px;\r\n\tbackground-color: #ffffff;\r\n\ttop: 120px;\r\n\t//left: 50%;\r\n\t//transform: translate(-50%, 0);\r\n\tz-index: 55;\r\n\tvisibility: hidden;\r\n\topacity: 0;\r\n\ttransition: all .4s;\r\n\tpadding: 50px 20px 40px;\r\n\tborder-radius: 6px;\r\n\tbox-shadow: 0px 2px 57px 0px rgba(1, 2, 2, 0.17);\r\n\tbox-sizing: border-box;\r\n\toverflow: hidden;\r\n\r\n\t&.show {\r\n\t\tvisibility: visible;\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t&__back {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground-color: rgba(255, 255, 255, 0.85);\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tz-index: 50;\r\n\t\tvisibility: hidden;\r\n\t\topacity: 0;\r\n\t\ttransition: all .4s;\r\n\r\n\t\t&.show {\r\n\t\t\tvisibility: visible;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t&__close-button {\r\n\t\tcursor: pointer;\r\n\t\tposition: absolute;\r\n\t\ttop: 20px;\r\n\t\tright: 20px;\r\n\t\twidth: 20px;\r\n\t\theight: 20px;\r\n\t\tpadding: 10px;\r\n\t\tbackground: url(\"/img/icon/letter-x.svg\") no-repeat center;\r\n\t\tbackground-size: 20px 20px;\r\n\t}\r\n\r\n\t&__header {\r\n\t\tfont-size: 1.6rem;\r\n\t\tfont-weight: bold;\r\n\t\ttext-transform: uppercase;\r\n\t\ttext-align: center;\r\n\t\tmargin-bottom: 25px;\r\n\t}\r\n\r\n\t&__choose-type {\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\t&__text {\r\n\t\tcolor: #555555;\r\n\t\ttext-align: center;\r\n\t\tmargin: 0 20px 0;\r\n\t}\r\n\r\n\t&__success-icon {\r\n\t\tbackground: url('../img/icons/Check_icon.svg') no-repeat center;\r\n\t\tbackground-size: cover;\r\n\t\theight: 53px;\r\n\t\twidth: 57px;\r\n\t\tmargin: auto;\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n}",".answer-page {\r\n\t.header {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}\r\n\r\n.answer {\r\n\t@extend %clearfix;\r\n\tpadding: 0 0 80px;\r\n\t&__title {\r\n\r\n\t}\r\n\t&__description {\r\n\t\tfont-family: pf_din_medium, Arial, sans-serif;\r\n\t\tfont-size: 1.26rem;\r\n\t\tline-height: 1.4;\r\n\t\tmargin-bottom: 30px;\r\n\t\tcolor: #555555;\r\n\t}\r\n\t&__question {\r\n\t\tmargin-bottom: 10px;\r\n\t\th3 {\r\n\t\t\tcursor: pointer;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tposition: relative;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tcolor: $title-blue;\r\n\t\t\tfont-size: 1.13rem;\r\n\t\t\tborder-bottom: 1px dashed;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t//margin-bottom: 15px;\r\n\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tright: -20px;\r\n\t\t\t\ttop: 5px;\r\n\t\t\t\tbackground: url('../img/icon/arrow-down.png') no-repeat center;\r\n\t\t\t\twidth: 12px;\r\n\t\t\t\theight: 8px;\r\n\t\t\t}\r\n\t\t}\r\n\t\tp {\r\n\t\t\tdisplay: none;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-size: 1.01rem;\r\n\t\t\tcolor: #555555;\r\n\t\t\tline-height: 1;\r\n\t\t\tfont-style: italic;\r\n\t\t\tmargin-top: 14px;\r\n\t\t}\r\n\t}\r\n\t& .open {\r\n\t\tmargin-top: 15px;\r\n\t\tmargin-bottom: 30px;\r\n\t\tpadding-left: 30px;\r\n\t\th3 {\r\n\t\t\t&:before {\r\n\t\t\t\tbackground: url('../img/icon/arrow-up.png') no-repeat center;\r\n\t\t\t}\r\n\t\t}\r\n\t\tp {\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t}\r\n}",".clinics {\r\n\tbackground: url('/img/bg-clinic.png') no-repeat center bottom;\r\n\tpadding: 0 0 150px;\r\n\t@extend %clearfix;\r\n\r\n\t&__description {\r\n\t\tmargin-bottom: 43px;\r\n\t}\r\n\r\n\t&__country {\r\n\t\tmargin-bottom: 52px;\r\n\t}\r\n\t&__clinic_name {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}",".contacts-page {\r\n\t.header {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}\r\n\r\n.contacts {\r\n\tpadding-bottom: 155px;\r\n\r\n\t&__title {\r\n\t\tmargin-bottom: 32px;\r\n\t}\r\n\r\n\t&__description {\r\n\t\tmargin-bottom: 29px;\r\n\t\tfont-size: 1.15rem;\r\n\t}\r\n\t&__text {\r\n\t\tmargin-bottom: 40px;\r\n\t}\r\n\t&__left {\r\n\t\t@include grid-span(7, 1);\r\n\t\tmin-height: 350px;\r\n\t}\r\n\t&__right {\r\n\t\t@include grid-span(7, 7);\r\n\t\tmargin-left: 48.45714%;\r\n\t\tmin-height: 350px;\r\n\t\tbackground: #fbfbfb;\r\n\t\tmargin-top: 22px;\r\n\t}\r\n\t&__attention {\r\n\t\tpadding: 62px 45px;\r\n\r\n\t\tp {\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-size: 1.25rem;\r\n\t\t\tmargin-bottom: 27px;\r\n\t\t\tline-height: 1.25;\r\n\r\n\t\t\t&:last-child {\r\n\t\t\t\tmargin-bottom: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.accent {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tmargin-bottom: 21px;\r\n\t\t}\r\n\t}\r\n\t&__connection {\r\n\t\tclear: both;\r\n\t\tpadding-top: 14px;\r\n\r\n\t\t&_title {\r\n\t\t\t@include grid-span(2, 1);\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tcolor: $orange;\r\n\t\t\tfont-size: 1.25rem;\r\n\t\t\tmargin-bottom: 20px;\r\n\t\t}\r\n\t\t&_description {\r\n\t\t\t@include grid-span(6, 1);\r\n\t\t\tfont-style: italic;\r\n\t\t\tfont-size: 1.05rem;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tcolor: #555555;\r\n\t\t\tmargin-bottom: 30px;\r\n\t\t\tclear: both;\r\n\t\t}\r\n\r\n\t\t&_list {\r\n\t\t\tclear: both;\r\n\t\t\tdisplay: flex;\r\n\t\t\tmargin-right: auto;\r\n\t\t\tmargin-left: auto;\r\n\t\t\tflex-flow: row wrap;\r\n\t\t\talign-items: baseline;\r\n\t\t\tjustify-content: flex-start;\r\n\t\t}\r\n\t\t&_item {\r\n\t\t\tmargin-left: 105px;\r\n\r\n\t\t\t&:first-child {\r\n\t\t\t\tmargin-left: 0;\r\n\t\t\t}\r\n\r\n\t\t\tul {\r\n\t\t\t\tmargin-left: 30px;\r\n\t\t\t}\r\n\r\n\t\t\tli {\r\n\t\t\t\tmargin-bottom: 10px;\r\n\t\t\t\t//padding-left: 10px;\r\n\t\t\t\t&:last-child {\r\n\t\t\t\t\tmargin-bottom: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tspan {\r\n\t\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t\tfont-size: 1.05rem;\r\n\t\t\t\t//margin-bottom: 10px;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t\tfont-size: 1.05rem;\r\n\t\t\t\tcolor: #555555;\r\n\t\t\t\t//margin-bottom: 10px;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t&_country {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 1.15rem;\r\n\t\t\tmargin-bottom: 10px;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t}\r\n\r\n\t\t&_adress {\r\n\t\t\tposition: relative;\r\n\r\n\t\t\t&:before {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\ttop: 0;\r\n\t\t\t\tleft: -30px;\r\n\t\t\t\tbackground: url('../img/icon/point.png') no-repeat center;\r\n\t\t\t\twidth: 17px;\r\n\t\t\t\theight: 20px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&_phone {\r\n\t\t\tposition: relative;\r\n\t\t\t&:before {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\ttop: 0;\r\n\t\t\t\tleft: -30px;\r\n\t\t\t\tbackground: url('../img/icon/phone.png') no-repeat center;\r\n\t\t\t\twidth: 13px;\r\n\t\t\t\theight: 19px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&_site {\r\n\t\t\tposition: relative;\r\n\t\t\t&:before {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\ttop: 0;\r\n\t\t\t\tleft: -30px;\r\n\t\t\t\tbackground: url('../img/icon/site.png') no-repeat center;\r\n\t\t\t\twidth: 17px;\r\n\t\t\t\theight: 16px;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tcolor: $orange;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&_mail {\r\n\t\t\tposition: relative;\r\n\t\t\t&:before {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\ttop: 0;\r\n\t\t\t\tleft: -30px;\r\n\t\t\t\tbackground: url('../img/icon/mail.png') no-repeat center;\r\n\t\t\t\twidth: 18px;\r\n\t\t\t\theight: 13px;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tcolor: $title-blue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",".price-page {\r\n\t.header {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}\r\n\r\n.price {\r\n\tpadding: 0 0 82px;\r\n\r\n\t&__title {\r\n\t\tmargin-bottom: 30px;\r\n\t}\r\n\t&__description {\r\n\t\tmargin-bottom: 28px;\r\n\t}\r\n\t&__text {\r\n\t\tmargin-bottom: 58px;\r\n\t}\r\n\t&__item {\r\n\t\tline-height: 1.4;\r\n\t\tposition: relative;\r\n\t\tmargin: 14px 0 -18px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t&__choose {\r\n\t\tmargin-bottom: 21px;\r\n\t}\r\n\r\n\t&__dots {\r\n\t\tflex-grow: 1;\r\n\t\tborder-bottom: 1px dashed black;\r\n\t\tposition: relative;\r\n\t\ttop: -9px;\r\n\t\tmargin: 0 5px;\r\n\t}\r\n\r\n\t&__clinic {\r\n\t\tmargin-bottom: 40px;\r\n\r\n\t\t&_name {\r\n\t\t\tmargin-bottom: 17px;\r\n\t\t}\r\n\t}\r\n\r\n\t&__country {\r\n\t\tmargin-bottom: 67px;\r\n\t}\r\n\r\n}\r\n",".review-page {\r\n\t.header {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}\r\n\r\n.review {\r\n\tpadding: 0 0 134px;\r\n\r\n\t&__wrap {\r\n\t\t@include grid-span(8, 1);\r\n\t}\r\n\t&__title {\r\n\t\tmargin-bottom: 35px;\r\n\t}\r\n\t&__description {\r\n\t\tfont-size: 1.15rem;\r\n\t\tmargin-bottom: 53px;\r\n\t}\r\n\t&__video {\r\n\t\tmax-width: 744px;\r\n\t\tmargin-bottom: 38px;\r\n\t}\r\n\t.review__video &__play {\r\n\t\twidth: 120px;\r\n\t\theight: 120px;\r\n\t}\r\n\t&__title_sub {\r\n\t\tfont-size: 1.53rem;\r\n\t\tcolor: #555;\r\n\t\tmargin-bottom: 17px;\r\n\t}\r\n\t&__text {\r\n\r\n\t\tp {\r\n\t\t\tline-height: 1.2;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tmargin-bottom: 20px;\r\n\t\t\tcolor: #555555;\r\n\t\t\t&:last-child {\r\n\t\t\t\tmargin-bottom: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",".doctor-page {\r\n\t.header {\r\n\t\tmargin-bottom: 41px;\r\n\t}\r\n}\r\n\r\n.doctor {\r\n\tpadding: 0 0 150px;\r\n\tposition: relative;\r\n\tborder-bottom: 18px solid #f2f2f2;\r\n\t&:after {\r\n\t\tcontent: '';\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\tbottom: 0;\r\n\t\t//left: 0;\r\n\t\tz-index: 40;\r\n\t\tright: 0;\r\n\t\tbackground: url(\"/img/bg-doctor.png\") no-repeat right bottom;\r\n\t\tbackground-size: contain;\r\n\t\twidth:328px;\r\n\t\theight: 262px;\r\n\t}\r\n\r\n\t&__title {\r\n\t\tmargin-bottom: 34px;\r\n\t}\r\n\t&__description {\r\n\t\tmargin-bottom: 45px;\r\n\t}\r\n\t&__choose {\r\n\t\tmargin-bottom: 37px;\r\n\t}\r\n\t&__clinic {\r\n\t\tmargin-bottom: 18px;\r\n\t}\r\n\t&__country {\r\n\t\tmargin-bottom: 47px;\r\n\t}\r\n\t&__wrap {\r\n\t\tposition: relative;\r\n\t\tz-index: 40;\r\n\t\tmargin-bottom: 19px;\r\n\t\t&:last-child {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\r\n\t\th3 {\r\n\t\t\tdisplay: block;\r\n\t\t\tcursor: pointer;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tposition: relative;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tcolor: $orange;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tborder-bottom: 1px dashed;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tmargin-bottom: 0;\r\n\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tright: -20px;\r\n\t\t\t\ttop: 7px;\r\n\t\t\t\tbackground: url('../img/icon/arrow-down.png') no-repeat center;\r\n\t\t\t\twidth: 12px;\r\n\t\t\t\theight: 8px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&__wrap.open {\r\n\t\th3 {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t\t.doctor__content {\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t}\r\n\r\n\t&__content {\r\n\t\tbackground: #fbfbfb;\r\n\t\tpadding: 21px 17px 42px;\r\n\t\tdisplay: none;\r\n\t\t@extend %clearfix;\r\n\r\n\t\tspan {\r\n\t\t\t//@include grid-span(3, 1);\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tcursor: pointer;\r\n\t\t\tposition: relative;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tcolor: $orange;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tborder-bottom: 0;\r\n\t\t\tmargin-bottom: 21px;\r\n\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tright: -20px;\r\n\t\t\t\ttop: 5px;\r\n\t\t\t\tbackground: url('../img/icon/arrow-up.png') no-repeat center;\r\n\t\t\t\twidth: 12px;\r\n\t\t\t\theight: 8px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&__content_left {\r\n\t\t@include grid-span(2, 1);\r\n\t}\r\n\t&__content_right {\r\n\t\t@include grid-span(12, 3);\r\n\t\twidth: 86.71429%;\r\n\r\n\t\ttable {\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\tth {\r\n\t\t\tvertical-align: top;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tcolor: #555555;\r\n\t\t\tmin-width: 290px;\r\n\t\t\ttext-align: left;\r\n\t\t\tpadding-bottom: 16px;\r\n\t\t}\r\n\t\ttd {\r\n\t\t\tvertical-align: top;\r\n\t\t\tfont-size: 1rem;\r\n\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\tcolor: #555555;\r\n\t\t\tmin-width: 200px;\r\n\t\t\ttext-align: left;\r\n\t\t\tpadding-bottom: 16px;\r\n\t\t\tline-height: 1.3;\r\n\r\n\t\t\tul {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tmargin-right: auto;\r\n\t\t\t\tmargin-left: auto;\r\n\t\t\t\tflex-flow: row wrap;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: flex-start;\r\n\r\n\t\t\t\tli {\r\n\t\t\t\t\tmargin-left: 30px;\r\n\t\t\t\t\t&:first-child {\r\n\t\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspan {\r\n\t\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\t\tfont-size: 1rem;\r\n\t\t\t\t\t\tfont-family: Arial, sans-serif;\r\n\t\t\t\t\t\tcolor: #555555;\r\n\t\t\t\t\t\tfont-weight: normal;\r\n\t\t\t\t\t\tmargin-bottom: 13px;\r\n\t\t\t\t\t\t&:before {\r\n\t\t\t\t\t\t\tdisplay: none;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\timg {\r\n\t\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\t\twidth: 48px;\r\n\t\t\t\t\t\tmargin: 0 auto;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n}"],"mappings":"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","names":[]}